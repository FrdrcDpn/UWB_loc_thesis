// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CONF_PARAMETERS_HXX
#define CONF_PARAMETERS_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class parameters_t;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class parameters_t: public ::xml_schema::type
{
  public:
  // Kpphi
  //
  typedef ::xml_schema::float_ Kpphi_type;
  typedef ::xsd::cxx::tree::traits< Kpphi_type, char > Kpphi_traits;

  const Kpphi_type&
  Kpphi () const;

  Kpphi_type&
  Kpphi ();

  void
  Kpphi (const Kpphi_type& x);

  // Kiphi
  //
  typedef ::xml_schema::float_ Kiphi_type;
  typedef ::xsd::cxx::tree::traits< Kiphi_type, char > Kiphi_traits;

  const Kiphi_type&
  Kiphi () const;

  Kiphi_type&
  Kiphi ();

  void
  Kiphi (const Kiphi_type& x);

  // Kdphi
  //
  typedef ::xml_schema::float_ Kdphi_type;
  typedef ::xsd::cxx::tree::traits< Kdphi_type, char > Kdphi_traits;

  const Kdphi_type&
  Kdphi () const;

  Kdphi_type&
  Kdphi ();

  void
  Kdphi (const Kdphi_type& x);

  // Kptheta
  //
  typedef ::xml_schema::float_ Kptheta_type;
  typedef ::xsd::cxx::tree::traits< Kptheta_type, char > Kptheta_traits;

  const Kptheta_type&
  Kptheta () const;

  Kptheta_type&
  Kptheta ();

  void
  Kptheta (const Kptheta_type& x);

  // Kitheta
  //
  typedef ::xml_schema::float_ Kitheta_type;
  typedef ::xsd::cxx::tree::traits< Kitheta_type, char > Kitheta_traits;

  const Kitheta_type&
  Kitheta () const;

  Kitheta_type&
  Kitheta ();

  void
  Kitheta (const Kitheta_type& x);

  // Kdtheta
  //
  typedef ::xml_schema::float_ Kdtheta_type;
  typedef ::xsd::cxx::tree::traits< Kdtheta_type, char > Kdtheta_traits;

  const Kdtheta_type&
  Kdtheta () const;

  Kdtheta_type&
  Kdtheta ();

  void
  Kdtheta (const Kdtheta_type& x);

  // Kpx
  //
  typedef ::xml_schema::float_ Kpx_type;
  typedef ::xsd::cxx::tree::traits< Kpx_type, char > Kpx_traits;

  const Kpx_type&
  Kpx () const;

  Kpx_type&
  Kpx ();

  void
  Kpx (const Kpx_type& x);

  // Kix
  //
  typedef ::xml_schema::float_ Kix_type;
  typedef ::xsd::cxx::tree::traits< Kix_type, char > Kix_traits;

  const Kix_type&
  Kix () const;

  Kix_type&
  Kix ();

  void
  Kix (const Kix_type& x);

  // Kdx
  //
  typedef ::xml_schema::float_ Kdx_type;
  typedef ::xsd::cxx::tree::traits< Kdx_type, char > Kdx_traits;

  const Kdx_type&
  Kdx () const;

  Kdx_type&
  Kdx ();

  void
  Kdx (const Kdx_type& x);

  // Kpy
  //
  typedef ::xml_schema::float_ Kpy_type;
  typedef ::xsd::cxx::tree::traits< Kpy_type, char > Kpy_traits;

  const Kpy_type&
  Kpy () const;

  Kpy_type&
  Kpy ();

  void
  Kpy (const Kpy_type& x);

  // Kiy
  //
  typedef ::xml_schema::float_ Kiy_type;
  typedef ::xsd::cxx::tree::traits< Kiy_type, char > Kiy_traits;

  const Kiy_type&
  Kiy () const;

  Kiy_type&
  Kiy ();

  void
  Kiy (const Kiy_type& x);

  // Kdy
  //
  typedef ::xml_schema::float_ Kdy_type;
  typedef ::xsd::cxx::tree::traits< Kdy_type, char > Kdy_traits;

  const Kdy_type&
  Kdy () const;

  Kdy_type&
  Kdy ();

  void
  Kdy (const Kdy_type& x);

  // Kpz
  //
  typedef ::xml_schema::float_ Kpz_type;
  typedef ::xsd::cxx::tree::traits< Kpz_type, char > Kpz_traits;

  const Kpz_type&
  Kpz () const;

  Kpz_type&
  Kpz ();

  void
  Kpz (const Kpz_type& x);

  // Kiz
  //
  typedef ::xml_schema::float_ Kiz_type;
  typedef ::xsd::cxx::tree::traits< Kiz_type, char > Kiz_traits;

  const Kiz_type&
  Kiz () const;

  Kiz_type&
  Kiz ();

  void
  Kiz (const Kiz_type& x);

  // Kdz
  //
  typedef ::xml_schema::float_ Kdz_type;
  typedef ::xsd::cxx::tree::traits< Kdz_type, char > Kdz_traits;

  const Kdz_type&
  Kdz () const;

  Kdz_type&
  Kdz ();

  void
  Kdz (const Kdz_type& x);

  // enable_UWB
  //
  typedef ::xml_schema::float_ enable_UWB_type;
  typedef ::xsd::cxx::tree::traits< enable_UWB_type, char > enable_UWB_traits;

  const enable_UWB_type&
  enable_UWB () const;

  enable_UWB_type&
  enable_UWB ();

  void
  enable_UWB (const enable_UWB_type& x);

  // dynamic_beacons
  //
  typedef ::xml_schema::float_ dynamic_beacons_type;
  typedef ::xsd::cxx::tree::traits< dynamic_beacons_type, char > dynamic_beacons_traits;

  const dynamic_beacons_type&
  dynamic_beacons () const;

  dynamic_beacons_type&
  dynamic_beacons ();

  void
  dynamic_beacons (const dynamic_beacons_type& x);

  // EKF_timestep
  //
  typedef ::xml_schema::float_ EKF_timestep_type;
  typedef ::xsd::cxx::tree::traits< EKF_timestep_type, char > EKF_timestep_traits;

  const EKF_timestep_type&
  EKF_timestep () const;

  EKF_timestep_type&
  EKF_timestep ();

  void
  EKF_timestep (const EKF_timestep_type& x);

  // IMU_timestep
  //
  typedef ::xml_schema::float_ IMU_timestep_type;
  typedef ::xsd::cxx::tree::traits< IMU_timestep_type, char > IMU_timestep_traits;

  const IMU_timestep_type&
  IMU_timestep () const;

  IMU_timestep_type&
  IMU_timestep ();

  void
  IMU_timestep (const IMU_timestep_type& x);

  // trajectory_frequency
  //
  typedef ::xml_schema::float_ trajectory_frequency_type;
  typedef ::xsd::cxx::tree::traits< trajectory_frequency_type, char > trajectory_frequency_traits;

  const trajectory_frequency_type&
  trajectory_frequency () const;

  trajectory_frequency_type&
  trajectory_frequency ();

  void
  trajectory_frequency (const trajectory_frequency_type& x);

  // UWB_frequency
  //
  typedef ::xml_schema::float_ UWB_frequency_type;
  typedef ::xsd::cxx::tree::traits< UWB_frequency_type, char > UWB_frequency_traits;

  const UWB_frequency_type&
  UWB_frequency () const;

  UWB_frequency_type&
  UWB_frequency ();

  void
  UWB_frequency (const UWB_frequency_type& x);

  // UWB_D_frequency
  //
  typedef ::xml_schema::float_ UWB_D_frequency_type;
  typedef ::xsd::cxx::tree::traits< UWB_D_frequency_type, char > UWB_D_frequency_traits;

  const UWB_D_frequency_type&
  UWB_D_frequency () const;

  UWB_D_frequency_type&
  UWB_D_frequency ();

  void
  UWB_D_frequency (const UWB_D_frequency_type& x);

  // UWB_signal_length
  //
  typedef ::xml_schema::float_ UWB_signal_length_type;
  typedef ::xsd::cxx::tree::traits< UWB_signal_length_type, char > UWB_signal_length_traits;

  const UWB_signal_length_type&
  UWB_signal_length () const;

  UWB_signal_length_type&
  UWB_signal_length ();

  void
  UWB_signal_length (const UWB_signal_length_type& x);

  // max_UWB_range
  //
  typedef ::xml_schema::float_ max_UWB_range_type;
  typedef ::xsd::cxx::tree::traits< max_UWB_range_type, char > max_UWB_range_traits;

  const max_UWB_range_type&
  max_UWB_range () const;

  max_UWB_range_type&
  max_UWB_range ();

  void
  max_UWB_range (const max_UWB_range_type& x);

  // s_tdoa
  //
  typedef ::xml_schema::float_ s_tdoa_type;
  typedef ::xsd::cxx::tree::traits< s_tdoa_type, char > s_tdoa_traits;

  const s_tdoa_type&
  s_tdoa () const;

  s_tdoa_type&
  s_tdoa ();

  void
  s_tdoa (const s_tdoa_type& x);

  // s_twr
  //
  typedef ::xml_schema::float_ s_twr_type;
  typedef ::xsd::cxx::tree::traits< s_twr_type, char > s_twr_traits;

  const s_twr_type&
  s_twr () const;

  s_twr_type&
  s_twr ();

  void
  s_twr (const s_twr_type& x);

  // Q
  //
  typedef ::xml_schema::float_ Q_type;
  typedef ::xsd::cxx::tree::traits< Q_type, char > Q_traits;

  const Q_type&
  Q () const;

  Q_type&
  Q ();

  void
  Q (const Q_type& x);

  // kR
  //
  typedef ::xml_schema::float_ kR_type;
  typedef ::xsd::cxx::tree::traits< kR_type, char > kR_traits;

  const kR_type&
  kR () const;

  kR_type&
  kR ();

  void
  kR (const kR_type& x);

  // beacon_1_en
  //
  typedef ::xml_schema::float_ beacon_1_en_type;
  typedef ::xsd::cxx::tree::traits< beacon_1_en_type, char > beacon_1_en_traits;

  const beacon_1_en_type&
  beacon_1_en () const;

  beacon_1_en_type&
  beacon_1_en ();

  void
  beacon_1_en (const beacon_1_en_type& x);

  // beacon_2_en
  //
  typedef ::xml_schema::float_ beacon_2_en_type;
  typedef ::xsd::cxx::tree::traits< beacon_2_en_type, char > beacon_2_en_traits;

  const beacon_2_en_type&
  beacon_2_en () const;

  beacon_2_en_type&
  beacon_2_en ();

  void
  beacon_2_en (const beacon_2_en_type& x);

  // beacon_3_en
  //
  typedef ::xml_schema::float_ beacon_3_en_type;
  typedef ::xsd::cxx::tree::traits< beacon_3_en_type, char > beacon_3_en_traits;

  const beacon_3_en_type&
  beacon_3_en () const;

  beacon_3_en_type&
  beacon_3_en ();

  void
  beacon_3_en (const beacon_3_en_type& x);

  // beacon_4_en
  //
  typedef ::xml_schema::float_ beacon_4_en_type;
  typedef ::xsd::cxx::tree::traits< beacon_4_en_type, char > beacon_4_en_traits;

  const beacon_4_en_type&
  beacon_4_en () const;

  beacon_4_en_type&
  beacon_4_en ();

  void
  beacon_4_en (const beacon_4_en_type& x);

  // beacon_5_en
  //
  typedef ::xml_schema::float_ beacon_5_en_type;
  typedef ::xsd::cxx::tree::traits< beacon_5_en_type, char > beacon_5_en_traits;

  const beacon_5_en_type&
  beacon_5_en () const;

  beacon_5_en_type&
  beacon_5_en ();

  void
  beacon_5_en (const beacon_5_en_type& x);

  // beacon_6_en
  //
  typedef ::xml_schema::float_ beacon_6_en_type;
  typedef ::xsd::cxx::tree::traits< beacon_6_en_type, char > beacon_6_en_traits;

  const beacon_6_en_type&
  beacon_6_en () const;

  beacon_6_en_type&
  beacon_6_en ();

  void
  beacon_6_en (const beacon_6_en_type& x);

  // beacon_7_en
  //
  typedef ::xml_schema::float_ beacon_7_en_type;
  typedef ::xsd::cxx::tree::traits< beacon_7_en_type, char > beacon_7_en_traits;

  const beacon_7_en_type&
  beacon_7_en () const;

  beacon_7_en_type&
  beacon_7_en ();

  void
  beacon_7_en (const beacon_7_en_type& x);

  // beacon_8_en
  //
  typedef ::xml_schema::float_ beacon_8_en_type;
  typedef ::xsd::cxx::tree::traits< beacon_8_en_type, char > beacon_8_en_traits;

  const beacon_8_en_type&
  beacon_8_en () const;

  beacon_8_en_type&
  beacon_8_en ();

  void
  beacon_8_en (const beacon_8_en_type& x);

  // beacon_1_freq
  //
  typedef ::xml_schema::float_ beacon_1_freq_type;
  typedef ::xsd::cxx::tree::traits< beacon_1_freq_type, char > beacon_1_freq_traits;

  const beacon_1_freq_type&
  beacon_1_freq () const;

  beacon_1_freq_type&
  beacon_1_freq ();

  void
  beacon_1_freq (const beacon_1_freq_type& x);

  // beacon_2_freq
  //
  typedef ::xml_schema::float_ beacon_2_freq_type;
  typedef ::xsd::cxx::tree::traits< beacon_2_freq_type, char > beacon_2_freq_traits;

  const beacon_2_freq_type&
  beacon_2_freq () const;

  beacon_2_freq_type&
  beacon_2_freq ();

  void
  beacon_2_freq (const beacon_2_freq_type& x);

  // beacon_3_freq
  //
  typedef ::xml_schema::float_ beacon_3_freq_type;
  typedef ::xsd::cxx::tree::traits< beacon_3_freq_type, char > beacon_3_freq_traits;

  const beacon_3_freq_type&
  beacon_3_freq () const;

  beacon_3_freq_type&
  beacon_3_freq ();

  void
  beacon_3_freq (const beacon_3_freq_type& x);

  // beacon_4_freq
  //
  typedef ::xml_schema::float_ beacon_4_freq_type;
  typedef ::xsd::cxx::tree::traits< beacon_4_freq_type, char > beacon_4_freq_traits;

  const beacon_4_freq_type&
  beacon_4_freq () const;

  beacon_4_freq_type&
  beacon_4_freq ();

  void
  beacon_4_freq (const beacon_4_freq_type& x);

  // beacon_5_freq
  //
  typedef ::xml_schema::float_ beacon_5_freq_type;
  typedef ::xsd::cxx::tree::traits< beacon_5_freq_type, char > beacon_5_freq_traits;

  const beacon_5_freq_type&
  beacon_5_freq () const;

  beacon_5_freq_type&
  beacon_5_freq ();

  void
  beacon_5_freq (const beacon_5_freq_type& x);

  // beacon_6_freq
  //
  typedef ::xml_schema::float_ beacon_6_freq_type;
  typedef ::xsd::cxx::tree::traits< beacon_6_freq_type, char > beacon_6_freq_traits;

  const beacon_6_freq_type&
  beacon_6_freq () const;

  beacon_6_freq_type&
  beacon_6_freq ();

  void
  beacon_6_freq (const beacon_6_freq_type& x);

  // beacon_7_freq
  //
  typedef ::xml_schema::float_ beacon_7_freq_type;
  typedef ::xsd::cxx::tree::traits< beacon_7_freq_type, char > beacon_7_freq_traits;

  const beacon_7_freq_type&
  beacon_7_freq () const;

  beacon_7_freq_type&
  beacon_7_freq ();

  void
  beacon_7_freq (const beacon_7_freq_type& x);

  // beacon_8_freq
  //
  typedef ::xml_schema::float_ beacon_8_freq_type;
  typedef ::xsd::cxx::tree::traits< beacon_8_freq_type, char > beacon_8_freq_traits;

  const beacon_8_freq_type&
  beacon_8_freq () const;

  beacon_8_freq_type&
  beacon_8_freq ();

  void
  beacon_8_freq (const beacon_8_freq_type& x);

  // beacon_dynamic_freq
  //
  typedef ::xml_schema::float_ beacon_dynamic_freq_type;
  typedef ::xsd::cxx::tree::traits< beacon_dynamic_freq_type, char > beacon_dynamic_freq_traits;

  const beacon_dynamic_freq_type&
  beacon_dynamic_freq () const;

  beacon_dynamic_freq_type&
  beacon_dynamic_freq ();

  void
  beacon_dynamic_freq (const beacon_dynamic_freq_type& x);

  // dynamic_cov_approach
  //
  typedef ::xml_schema::float_ dynamic_cov_approach_type;
  typedef ::xsd::cxx::tree::traits< dynamic_cov_approach_type, char > dynamic_cov_approach_traits;

  const dynamic_cov_approach_type&
  dynamic_cov_approach () const;

  dynamic_cov_approach_type&
  dynamic_cov_approach ();

  void
  dynamic_cov_approach (const dynamic_cov_approach_type& x);

  // beaconvelocity
  //
  typedef ::xml_schema::float_ beaconvelocity_type;
  typedef ::xsd::cxx::tree::traits< beaconvelocity_type, char > beaconvelocity_traits;

  const beaconvelocity_type&
  beaconvelocity () const;

  beaconvelocity_type&
  beaconvelocity ();

  void
  beaconvelocity (const beaconvelocity_type& x);

  // x_beacon_1
  //
  typedef ::xml_schema::float_ x_beacon_1_type;
  typedef ::xsd::cxx::tree::traits< x_beacon_1_type, char > x_beacon_1_traits;

  const x_beacon_1_type&
  x_beacon_1 () const;

  x_beacon_1_type&
  x_beacon_1 ();

  void
  x_beacon_1 (const x_beacon_1_type& x);

  // y_beacon_1
  //
  typedef ::xml_schema::float_ y_beacon_1_type;
  typedef ::xsd::cxx::tree::traits< y_beacon_1_type, char > y_beacon_1_traits;

  const y_beacon_1_type&
  y_beacon_1 () const;

  y_beacon_1_type&
  y_beacon_1 ();

  void
  y_beacon_1 (const y_beacon_1_type& x);

  // x_beacon_2
  //
  typedef ::xml_schema::float_ x_beacon_2_type;
  typedef ::xsd::cxx::tree::traits< x_beacon_2_type, char > x_beacon_2_traits;

  const x_beacon_2_type&
  x_beacon_2 () const;

  x_beacon_2_type&
  x_beacon_2 ();

  void
  x_beacon_2 (const x_beacon_2_type& x);

  // y_beacon_2
  //
  typedef ::xml_schema::float_ y_beacon_2_type;
  typedef ::xsd::cxx::tree::traits< y_beacon_2_type, char > y_beacon_2_traits;

  const y_beacon_2_type&
  y_beacon_2 () const;

  y_beacon_2_type&
  y_beacon_2 ();

  void
  y_beacon_2 (const y_beacon_2_type& x);

  // x_beacon_3
  //
  typedef ::xml_schema::float_ x_beacon_3_type;
  typedef ::xsd::cxx::tree::traits< x_beacon_3_type, char > x_beacon_3_traits;

  const x_beacon_3_type&
  x_beacon_3 () const;

  x_beacon_3_type&
  x_beacon_3 ();

  void
  x_beacon_3 (const x_beacon_3_type& x);

  // y_beacon_3
  //
  typedef ::xml_schema::float_ y_beacon_3_type;
  typedef ::xsd::cxx::tree::traits< y_beacon_3_type, char > y_beacon_3_traits;

  const y_beacon_3_type&
  y_beacon_3 () const;

  y_beacon_3_type&
  y_beacon_3 ();

  void
  y_beacon_3 (const y_beacon_3_type& x);

  // x_beacon_4
  //
  typedef ::xml_schema::float_ x_beacon_4_type;
  typedef ::xsd::cxx::tree::traits< x_beacon_4_type, char > x_beacon_4_traits;

  const x_beacon_4_type&
  x_beacon_4 () const;

  x_beacon_4_type&
  x_beacon_4 ();

  void
  x_beacon_4 (const x_beacon_4_type& x);

  // y_beacon_4
  //
  typedef ::xml_schema::float_ y_beacon_4_type;
  typedef ::xsd::cxx::tree::traits< y_beacon_4_type, char > y_beacon_4_traits;

  const y_beacon_4_type&
  y_beacon_4 () const;

  y_beacon_4_type&
  y_beacon_4 ();

  void
  y_beacon_4 (const y_beacon_4_type& x);

  // x_beacon_5
  //
  typedef ::xml_schema::float_ x_beacon_5_type;
  typedef ::xsd::cxx::tree::traits< x_beacon_5_type, char > x_beacon_5_traits;

  const x_beacon_5_type&
  x_beacon_5 () const;

  x_beacon_5_type&
  x_beacon_5 ();

  void
  x_beacon_5 (const x_beacon_5_type& x);

  // y_beacon_5
  //
  typedef ::xml_schema::float_ y_beacon_5_type;
  typedef ::xsd::cxx::tree::traits< y_beacon_5_type, char > y_beacon_5_traits;

  const y_beacon_5_type&
  y_beacon_5 () const;

  y_beacon_5_type&
  y_beacon_5 ();

  void
  y_beacon_5 (const y_beacon_5_type& x);

  // x_beacon_6
  //
  typedef ::xml_schema::float_ x_beacon_6_type;
  typedef ::xsd::cxx::tree::traits< x_beacon_6_type, char > x_beacon_6_traits;

  const x_beacon_6_type&
  x_beacon_6 () const;

  x_beacon_6_type&
  x_beacon_6 ();

  void
  x_beacon_6 (const x_beacon_6_type& x);

  // y_beacon_6
  //
  typedef ::xml_schema::float_ y_beacon_6_type;
  typedef ::xsd::cxx::tree::traits< y_beacon_6_type, char > y_beacon_6_traits;

  const y_beacon_6_type&
  y_beacon_6 () const;

  y_beacon_6_type&
  y_beacon_6 ();

  void
  y_beacon_6 (const y_beacon_6_type& x);

  // x_beacon_7
  //
  typedef ::xml_schema::float_ x_beacon_7_type;
  typedef ::xsd::cxx::tree::traits< x_beacon_7_type, char > x_beacon_7_traits;

  const x_beacon_7_type&
  x_beacon_7 () const;

  x_beacon_7_type&
  x_beacon_7 ();

  void
  x_beacon_7 (const x_beacon_7_type& x);

  // y_beacon_7
  //
  typedef ::xml_schema::float_ y_beacon_7_type;
  typedef ::xsd::cxx::tree::traits< y_beacon_7_type, char > y_beacon_7_traits;

  const y_beacon_7_type&
  y_beacon_7 () const;

  y_beacon_7_type&
  y_beacon_7 ();

  void
  y_beacon_7 (const y_beacon_7_type& x);

  // x_beacon_8
  //
  typedef ::xml_schema::float_ x_beacon_8_type;
  typedef ::xsd::cxx::tree::traits< x_beacon_8_type, char > x_beacon_8_traits;

  const x_beacon_8_type&
  x_beacon_8 () const;

  x_beacon_8_type&
  x_beacon_8 ();

  void
  x_beacon_8 (const x_beacon_8_type& x);

  // y_beacon_8
  //
  typedef ::xml_schema::float_ y_beacon_8_type;
  typedef ::xsd::cxx::tree::traits< y_beacon_8_type, char > y_beacon_8_traits;

  const y_beacon_8_type&
  y_beacon_8 () const;

  y_beacon_8_type&
  y_beacon_8 ();

  void
  y_beacon_8 (const y_beacon_8_type& x);

  // acc_noise_sigma
  //
  typedef ::xml_schema::float_ acc_noise_sigma_type;
  typedef ::xsd::cxx::tree::traits< acc_noise_sigma_type, char > acc_noise_sigma_traits;

  const acc_noise_sigma_type&
  acc_noise_sigma () const;

  acc_noise_sigma_type&
  acc_noise_sigma ();

  void
  acc_noise_sigma (const acc_noise_sigma_type& x);

  // noise_motor_sigma
  //
  typedef ::xml_schema::float_ noise_motor_sigma_type;
  typedef ::xsd::cxx::tree::traits< noise_motor_sigma_type, char > noise_motor_sigma_traits;

  const noise_motor_sigma_type&
  noise_motor_sigma () const;

  noise_motor_sigma_type&
  noise_motor_sigma ();

  void
  noise_motor_sigma (const noise_motor_sigma_type& x);

  // noise_type
  //
  typedef ::xml_schema::integer noise_type_type;
  typedef ::xsd::cxx::tree::traits< noise_type_type, char > noise_type_traits;

  const noise_type_type&
  noise_type () const;

  noise_type_type&
  noise_type ();

  void
  noise_type (const noise_type_type& x);

  // gauss_sigma
  //
  typedef ::xml_schema::float_ gauss_sigma_type;
  typedef ::xsd::cxx::tree::traits< gauss_sigma_type, char > gauss_sigma_traits;

  const gauss_sigma_type&
  gauss_sigma () const;

  gauss_sigma_type&
  gauss_sigma ();

  void
  gauss_sigma (const gauss_sigma_type& x);

  // gauss_sigma_twr
  //
  typedef ::xml_schema::float_ gauss_sigma_twr_type;
  typedef ::xsd::cxx::tree::traits< gauss_sigma_twr_type, char > gauss_sigma_twr_traits;

  const gauss_sigma_twr_type&
  gauss_sigma_twr () const;

  gauss_sigma_twr_type&
  gauss_sigma_twr ();

  void
  gauss_sigma_twr (const gauss_sigma_twr_type& x);

  // gauss_sigma_tdoa
  //
  typedef ::xml_schema::float_ gauss_sigma_tdoa_type;
  typedef ::xsd::cxx::tree::traits< gauss_sigma_tdoa_type, char > gauss_sigma_tdoa_traits;

  const gauss_sigma_tdoa_type&
  gauss_sigma_tdoa () const;

  gauss_sigma_tdoa_type&
  gauss_sigma_tdoa ();

  void
  gauss_sigma_tdoa (const gauss_sigma_tdoa_type& x);

  // htc_gamma
  //
  typedef ::xml_schema::float_ htc_gamma_type;
  typedef ::xsd::cxx::tree::traits< htc_gamma_type, char > htc_gamma_traits;

  const htc_gamma_type&
  htc_gamma () const;

  htc_gamma_type&
  htc_gamma ();

  void
  htc_gamma (const htc_gamma_type& x);

  // htc_ratio
  //
  typedef ::xml_schema::float_ htc_ratio_type;
  typedef ::xsd::cxx::tree::traits< htc_ratio_type, char > htc_ratio_traits;

  const htc_ratio_type&
  htc_ratio () const;

  htc_ratio_type&
  htc_ratio ();

  void
  htc_ratio (const htc_ratio_type& x);

  // htg_mu
  //
  typedef ::xml_schema::float_ htg_mu_type;
  typedef ::xsd::cxx::tree::traits< htg_mu_type, char > htg_mu_traits;

  const htg_mu_type&
  htg_mu () const;

  htg_mu_type&
  htg_mu ();

  void
  htg_mu (const htg_mu_type& x);

  // htg_k
  //
  typedef ::xml_schema::float_ htg_k_type;
  typedef ::xsd::cxx::tree::traits< htg_k_type, char > htg_k_traits;

  const htg_k_type&
  htg_k () const;

  htg_k_type&
  htg_k ();

  void
  htg_k (const htg_k_type& x);

  // htg_lambda
  //
  typedef ::xml_schema::float_ htg_lambda_type;
  typedef ::xsd::cxx::tree::traits< htg_lambda_type, char > htg_lambda_traits;

  const htg_lambda_type&
  htg_lambda () const;

  htg_lambda_type&
  htg_lambda ();

  void
  htg_lambda (const htg_lambda_type& x);

  // htg_scale
  //
  typedef ::xml_schema::float_ htg_scale_type;
  typedef ::xsd::cxx::tree::traits< htg_scale_type, char > htg_scale_traits;

  const htg_scale_type&
  htg_scale () const;

  htg_scale_type&
  htg_scale ();

  void
  htg_scale (const htg_scale_type& x);

  // terminaloutput
  //
  typedef ::xml_schema::float_ terminaloutput_type;
  typedef ::xsd::cxx::tree::traits< terminaloutput_type, char > terminaloutput_traits;

  const terminaloutput_type&
  terminaloutput () const;

  terminaloutput_type&
  terminaloutput ();

  void
  terminaloutput (const terminaloutput_type& x);

  // simulation_updatefreq
  //
  typedef ::xml_schema::float_ simulation_updatefreq_type;
  typedef ::xsd::cxx::tree::traits< simulation_updatefreq_type, char > simulation_updatefreq_traits;

  const simulation_updatefreq_type&
  simulation_updatefreq () const;

  simulation_updatefreq_type&
  simulation_updatefreq ();

  void
  simulation_updatefreq (const simulation_updatefreq_type& x);

  // simulation_realtimefactor
  //
  typedef ::xml_schema::float_ simulation_realtimefactor_type;
  typedef ::xsd::cxx::tree::traits< simulation_realtimefactor_type, char > simulation_realtimefactor_traits;

  const simulation_realtimefactor_type&
  simulation_realtimefactor () const;

  simulation_realtimefactor_type&
  simulation_realtimefactor ();

  void
  simulation_realtimefactor (const simulation_realtimefactor_type& x);

  // time_limit
  //
  typedef ::xml_schema::float_ time_limit_type;
  typedef ::xsd::cxx::tree::traits< time_limit_type, char > time_limit_traits;

  const time_limit_type&
  time_limit () const;

  time_limit_type&
  time_limit ();

  void
  time_limit (const time_limit_type& x);

  // environment
  //
  typedef ::xml_schema::string environment_type;
  typedef ::xsd::cxx::tree::traits< environment_type, char > environment_traits;

  const environment_type&
  environment () const;

  environment_type&
  environment ();

  void
  environment (const environment_type& x);

  void
  environment (::std::auto_ptr< environment_type > p);

  // window_width
  //
  typedef ::xml_schema::integer window_width_type;
  typedef ::xsd::cxx::tree::traits< window_width_type, char > window_width_traits;

  const window_width_type&
  window_width () const;

  window_width_type&
  window_width ();

  void
  window_width (const window_width_type& x);

  // window_height
  //
  typedef ::xml_schema::integer window_height_type;
  typedef ::xsd::cxx::tree::traits< window_height_type, char > window_height_traits;

  const window_height_type&
  window_height () const;

  window_height_type&
  window_height ();

  void
  window_height (const window_height_type& x);

  // scale
  //
  typedef ::xml_schema::float_ scale_type;
  typedef ::xsd::cxx::tree::traits< scale_type, char > scale_traits;

  const scale_type&
  scale () const;

  scale_type&
  scale ();

  void
  scale (const scale_type& x);

  // mouse_drag_speed
  //
  typedef ::xml_schema::float_ mouse_drag_speed_type;
  typedef ::xsd::cxx::tree::traits< mouse_drag_speed_type, char > mouse_drag_speed_traits;

  const mouse_drag_speed_type&
  mouse_drag_speed () const;

  mouse_drag_speed_type&
  mouse_drag_speed ();

  void
  mouse_drag_speed (const mouse_drag_speed_type& x);

  // mouse_zoom_speed
  //
  typedef ::xml_schema::float_ mouse_zoom_speed_type;
  typedef ::xsd::cxx::tree::traits< mouse_zoom_speed_type, char > mouse_zoom_speed_traits;

  const mouse_zoom_speed_type&
  mouse_zoom_speed () const;

  mouse_zoom_speed_type&
  mouse_zoom_speed ();

  void
  mouse_zoom_speed (const mouse_zoom_speed_type& x);

  // zoom
  //
  typedef ::xml_schema::integer zoom_type;
  typedef ::xsd::cxx::tree::traits< zoom_type, char > zoom_traits;

  const zoom_type&
  zoom () const;

  zoom_type&
  zoom ();

  void
  zoom (const zoom_type& x);

  // animation_updatefreq
  //
  typedef ::xml_schema::float_ animation_updatefreq_type;
  typedef ::xsd::cxx::tree::traits< animation_updatefreq_type, char > animation_updatefreq_traits;

  const animation_updatefreq_type&
  animation_updatefreq () const;

  animation_updatefreq_type&
  animation_updatefreq ();

  void
  animation_updatefreq (const animation_updatefreq_type& x);

  // logger_updatefreq
  //
  typedef ::xml_schema::integer logger_updatefreq_type;
  typedef ::xsd::cxx::tree::traits< logger_updatefreq_type, char > logger_updatefreq_traits;

  const logger_updatefreq_type&
  logger_updatefreq () const;

  logger_updatefreq_type&
  logger_updatefreq ();

  void
  logger_updatefreq (const logger_updatefreq_type& x);

  // policy
  //
  typedef ::xml_schema::string policy_type;
  typedef ::xsd::cxx::tree::traits< policy_type, char > policy_traits;

  const policy_type&
  policy () const;

  policy_type&
  policy ();

  void
  policy (const policy_type& x);

  void
  policy (::std::auto_ptr< policy_type > p);

  // fitness
  //
  typedef ::xml_schema::string fitness_type;
  typedef ::xsd::cxx::tree::traits< fitness_type, char > fitness_traits;

  const fitness_type&
  fitness () const;

  fitness_type&
  fitness ();

  void
  fitness (const fitness_type& x);

  void
  fitness (::std::auto_ptr< fitness_type > p);

  // Constructors.
  //
  parameters_t (const Kpphi_type&,
                const Kiphi_type&,
                const Kdphi_type&,
                const Kptheta_type&,
                const Kitheta_type&,
                const Kdtheta_type&,
                const Kpx_type&,
                const Kix_type&,
                const Kdx_type&,
                const Kpy_type&,
                const Kiy_type&,
                const Kdy_type&,
                const Kpz_type&,
                const Kiz_type&,
                const Kdz_type&,
                const enable_UWB_type&,
                const dynamic_beacons_type&,
                const EKF_timestep_type&,
                const IMU_timestep_type&,
                const trajectory_frequency_type&,
                const UWB_frequency_type&,
                const UWB_D_frequency_type&,
                const UWB_signal_length_type&,
                const max_UWB_range_type&,
                const s_tdoa_type&,
                const s_twr_type&,
                const Q_type&,
                const kR_type&,
                const beacon_1_en_type&,
                const beacon_2_en_type&,
                const beacon_3_en_type&,
                const beacon_4_en_type&,
                const beacon_5_en_type&,
                const beacon_6_en_type&,
                const beacon_7_en_type&,
                const beacon_8_en_type&,
                const beacon_1_freq_type&,
                const beacon_2_freq_type&,
                const beacon_3_freq_type&,
                const beacon_4_freq_type&,
                const beacon_5_freq_type&,
                const beacon_6_freq_type&,
                const beacon_7_freq_type&,
                const beacon_8_freq_type&,
                const beacon_dynamic_freq_type&,
                const dynamic_cov_approach_type&,
                const beaconvelocity_type&,
                const x_beacon_1_type&,
                const y_beacon_1_type&,
                const x_beacon_2_type&,
                const y_beacon_2_type&,
                const x_beacon_3_type&,
                const y_beacon_3_type&,
                const x_beacon_4_type&,
                const y_beacon_4_type&,
                const x_beacon_5_type&,
                const y_beacon_5_type&,
                const x_beacon_6_type&,
                const y_beacon_6_type&,
                const x_beacon_7_type&,
                const y_beacon_7_type&,
                const x_beacon_8_type&,
                const y_beacon_8_type&,
                const acc_noise_sigma_type&,
                const noise_motor_sigma_type&,
                const noise_type_type&,
                const gauss_sigma_type&,
                const gauss_sigma_twr_type&,
                const gauss_sigma_tdoa_type&,
                const htc_gamma_type&,
                const htc_ratio_type&,
                const htg_mu_type&,
                const htg_k_type&,
                const htg_lambda_type&,
                const htg_scale_type&,
                const terminaloutput_type&,
                const simulation_updatefreq_type&,
                const simulation_realtimefactor_type&,
                const time_limit_type&,
                const environment_type&,
                const window_width_type&,
                const window_height_type&,
                const scale_type&,
                const mouse_drag_speed_type&,
                const mouse_zoom_speed_type&,
                const zoom_type&,
                const animation_updatefreq_type&,
                const logger_updatefreq_type&,
                const policy_type&,
                const fitness_type&);

  parameters_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  parameters_t (const parameters_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual parameters_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  parameters_t&
  operator= (const parameters_t& x);

  virtual 
  ~parameters_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Kpphi_type > Kpphi_;
  ::xsd::cxx::tree::one< Kiphi_type > Kiphi_;
  ::xsd::cxx::tree::one< Kdphi_type > Kdphi_;
  ::xsd::cxx::tree::one< Kptheta_type > Kptheta_;
  ::xsd::cxx::tree::one< Kitheta_type > Kitheta_;
  ::xsd::cxx::tree::one< Kdtheta_type > Kdtheta_;
  ::xsd::cxx::tree::one< Kpx_type > Kpx_;
  ::xsd::cxx::tree::one< Kix_type > Kix_;
  ::xsd::cxx::tree::one< Kdx_type > Kdx_;
  ::xsd::cxx::tree::one< Kpy_type > Kpy_;
  ::xsd::cxx::tree::one< Kiy_type > Kiy_;
  ::xsd::cxx::tree::one< Kdy_type > Kdy_;
  ::xsd::cxx::tree::one< Kpz_type > Kpz_;
  ::xsd::cxx::tree::one< Kiz_type > Kiz_;
  ::xsd::cxx::tree::one< Kdz_type > Kdz_;
  ::xsd::cxx::tree::one< enable_UWB_type > enable_UWB_;
  ::xsd::cxx::tree::one< dynamic_beacons_type > dynamic_beacons_;
  ::xsd::cxx::tree::one< EKF_timestep_type > EKF_timestep_;
  ::xsd::cxx::tree::one< IMU_timestep_type > IMU_timestep_;
  ::xsd::cxx::tree::one< trajectory_frequency_type > trajectory_frequency_;
  ::xsd::cxx::tree::one< UWB_frequency_type > UWB_frequency_;
  ::xsd::cxx::tree::one< UWB_D_frequency_type > UWB_D_frequency_;
  ::xsd::cxx::tree::one< UWB_signal_length_type > UWB_signal_length_;
  ::xsd::cxx::tree::one< max_UWB_range_type > max_UWB_range_;
  ::xsd::cxx::tree::one< s_tdoa_type > s_tdoa_;
  ::xsd::cxx::tree::one< s_twr_type > s_twr_;
  ::xsd::cxx::tree::one< Q_type > Q_;
  ::xsd::cxx::tree::one< kR_type > kR_;
  ::xsd::cxx::tree::one< beacon_1_en_type > beacon_1_en_;
  ::xsd::cxx::tree::one< beacon_2_en_type > beacon_2_en_;
  ::xsd::cxx::tree::one< beacon_3_en_type > beacon_3_en_;
  ::xsd::cxx::tree::one< beacon_4_en_type > beacon_4_en_;
  ::xsd::cxx::tree::one< beacon_5_en_type > beacon_5_en_;
  ::xsd::cxx::tree::one< beacon_6_en_type > beacon_6_en_;
  ::xsd::cxx::tree::one< beacon_7_en_type > beacon_7_en_;
  ::xsd::cxx::tree::one< beacon_8_en_type > beacon_8_en_;
  ::xsd::cxx::tree::one< beacon_1_freq_type > beacon_1_freq_;
  ::xsd::cxx::tree::one< beacon_2_freq_type > beacon_2_freq_;
  ::xsd::cxx::tree::one< beacon_3_freq_type > beacon_3_freq_;
  ::xsd::cxx::tree::one< beacon_4_freq_type > beacon_4_freq_;
  ::xsd::cxx::tree::one< beacon_5_freq_type > beacon_5_freq_;
  ::xsd::cxx::tree::one< beacon_6_freq_type > beacon_6_freq_;
  ::xsd::cxx::tree::one< beacon_7_freq_type > beacon_7_freq_;
  ::xsd::cxx::tree::one< beacon_8_freq_type > beacon_8_freq_;
  ::xsd::cxx::tree::one< beacon_dynamic_freq_type > beacon_dynamic_freq_;
  ::xsd::cxx::tree::one< dynamic_cov_approach_type > dynamic_cov_approach_;
  ::xsd::cxx::tree::one< beaconvelocity_type > beaconvelocity_;
  ::xsd::cxx::tree::one< x_beacon_1_type > x_beacon_1_;
  ::xsd::cxx::tree::one< y_beacon_1_type > y_beacon_1_;
  ::xsd::cxx::tree::one< x_beacon_2_type > x_beacon_2_;
  ::xsd::cxx::tree::one< y_beacon_2_type > y_beacon_2_;
  ::xsd::cxx::tree::one< x_beacon_3_type > x_beacon_3_;
  ::xsd::cxx::tree::one< y_beacon_3_type > y_beacon_3_;
  ::xsd::cxx::tree::one< x_beacon_4_type > x_beacon_4_;
  ::xsd::cxx::tree::one< y_beacon_4_type > y_beacon_4_;
  ::xsd::cxx::tree::one< x_beacon_5_type > x_beacon_5_;
  ::xsd::cxx::tree::one< y_beacon_5_type > y_beacon_5_;
  ::xsd::cxx::tree::one< x_beacon_6_type > x_beacon_6_;
  ::xsd::cxx::tree::one< y_beacon_6_type > y_beacon_6_;
  ::xsd::cxx::tree::one< x_beacon_7_type > x_beacon_7_;
  ::xsd::cxx::tree::one< y_beacon_7_type > y_beacon_7_;
  ::xsd::cxx::tree::one< x_beacon_8_type > x_beacon_8_;
  ::xsd::cxx::tree::one< y_beacon_8_type > y_beacon_8_;
  ::xsd::cxx::tree::one< acc_noise_sigma_type > acc_noise_sigma_;
  ::xsd::cxx::tree::one< noise_motor_sigma_type > noise_motor_sigma_;
  ::xsd::cxx::tree::one< noise_type_type > noise_type_;
  ::xsd::cxx::tree::one< gauss_sigma_type > gauss_sigma_;
  ::xsd::cxx::tree::one< gauss_sigma_twr_type > gauss_sigma_twr_;
  ::xsd::cxx::tree::one< gauss_sigma_tdoa_type > gauss_sigma_tdoa_;
  ::xsd::cxx::tree::one< htc_gamma_type > htc_gamma_;
  ::xsd::cxx::tree::one< htc_ratio_type > htc_ratio_;
  ::xsd::cxx::tree::one< htg_mu_type > htg_mu_;
  ::xsd::cxx::tree::one< htg_k_type > htg_k_;
  ::xsd::cxx::tree::one< htg_lambda_type > htg_lambda_;
  ::xsd::cxx::tree::one< htg_scale_type > htg_scale_;
  ::xsd::cxx::tree::one< terminaloutput_type > terminaloutput_;
  ::xsd::cxx::tree::one< simulation_updatefreq_type > simulation_updatefreq_;
  ::xsd::cxx::tree::one< simulation_realtimefactor_type > simulation_realtimefactor_;
  ::xsd::cxx::tree::one< time_limit_type > time_limit_;
  ::xsd::cxx::tree::one< environment_type > environment_;
  ::xsd::cxx::tree::one< window_width_type > window_width_;
  ::xsd::cxx::tree::one< window_height_type > window_height_;
  ::xsd::cxx::tree::one< scale_type > scale_;
  ::xsd::cxx::tree::one< mouse_drag_speed_type > mouse_drag_speed_;
  ::xsd::cxx::tree::one< mouse_zoom_speed_type > mouse_zoom_speed_;
  ::xsd::cxx::tree::one< zoom_type > zoom_;
  ::xsd::cxx::tree::one< animation_updatefreq_type > animation_updatefreq_;
  ::xsd::cxx::tree::one< logger_updatefreq_type > logger_updatefreq_;
  ::xsd::cxx::tree::one< policy_type > policy_;
  ::xsd::cxx::tree::one< fitness_type > fitness_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::parameters_t >
parameters (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::parameters_t >
parameters (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::parameters_t >
parameters (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::parameters_t >
parameters (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::parameters_t >
parameters (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::parameters_t >
parameters (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::parameters_t >
parameters (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::parameters_t >
parameters (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CONF_PARAMETERS_HXX
