// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "parameters.hxx"

// parameters_t
// 

const parameters_t::Kpphi_type& parameters_t::
Kpphi () const
{
  return this->Kpphi_.get ();
}

parameters_t::Kpphi_type& parameters_t::
Kpphi ()
{
  return this->Kpphi_.get ();
}

void parameters_t::
Kpphi (const Kpphi_type& x)
{
  this->Kpphi_.set (x);
}

const parameters_t::Kiphi_type& parameters_t::
Kiphi () const
{
  return this->Kiphi_.get ();
}

parameters_t::Kiphi_type& parameters_t::
Kiphi ()
{
  return this->Kiphi_.get ();
}

void parameters_t::
Kiphi (const Kiphi_type& x)
{
  this->Kiphi_.set (x);
}

const parameters_t::Kdphi_type& parameters_t::
Kdphi () const
{
  return this->Kdphi_.get ();
}

parameters_t::Kdphi_type& parameters_t::
Kdphi ()
{
  return this->Kdphi_.get ();
}

void parameters_t::
Kdphi (const Kdphi_type& x)
{
  this->Kdphi_.set (x);
}

const parameters_t::Kptheta_type& parameters_t::
Kptheta () const
{
  return this->Kptheta_.get ();
}

parameters_t::Kptheta_type& parameters_t::
Kptheta ()
{
  return this->Kptheta_.get ();
}

void parameters_t::
Kptheta (const Kptheta_type& x)
{
  this->Kptheta_.set (x);
}

const parameters_t::Kitheta_type& parameters_t::
Kitheta () const
{
  return this->Kitheta_.get ();
}

parameters_t::Kitheta_type& parameters_t::
Kitheta ()
{
  return this->Kitheta_.get ();
}

void parameters_t::
Kitheta (const Kitheta_type& x)
{
  this->Kitheta_.set (x);
}

const parameters_t::Kdtheta_type& parameters_t::
Kdtheta () const
{
  return this->Kdtheta_.get ();
}

parameters_t::Kdtheta_type& parameters_t::
Kdtheta ()
{
  return this->Kdtheta_.get ();
}

void parameters_t::
Kdtheta (const Kdtheta_type& x)
{
  this->Kdtheta_.set (x);
}

const parameters_t::Kpx_type& parameters_t::
Kpx () const
{
  return this->Kpx_.get ();
}

parameters_t::Kpx_type& parameters_t::
Kpx ()
{
  return this->Kpx_.get ();
}

void parameters_t::
Kpx (const Kpx_type& x)
{
  this->Kpx_.set (x);
}

const parameters_t::Kix_type& parameters_t::
Kix () const
{
  return this->Kix_.get ();
}

parameters_t::Kix_type& parameters_t::
Kix ()
{
  return this->Kix_.get ();
}

void parameters_t::
Kix (const Kix_type& x)
{
  this->Kix_.set (x);
}

const parameters_t::Kdx_type& parameters_t::
Kdx () const
{
  return this->Kdx_.get ();
}

parameters_t::Kdx_type& parameters_t::
Kdx ()
{
  return this->Kdx_.get ();
}

void parameters_t::
Kdx (const Kdx_type& x)
{
  this->Kdx_.set (x);
}

const parameters_t::Kpy_type& parameters_t::
Kpy () const
{
  return this->Kpy_.get ();
}

parameters_t::Kpy_type& parameters_t::
Kpy ()
{
  return this->Kpy_.get ();
}

void parameters_t::
Kpy (const Kpy_type& x)
{
  this->Kpy_.set (x);
}

const parameters_t::Kiy_type& parameters_t::
Kiy () const
{
  return this->Kiy_.get ();
}

parameters_t::Kiy_type& parameters_t::
Kiy ()
{
  return this->Kiy_.get ();
}

void parameters_t::
Kiy (const Kiy_type& x)
{
  this->Kiy_.set (x);
}

const parameters_t::Kdy_type& parameters_t::
Kdy () const
{
  return this->Kdy_.get ();
}

parameters_t::Kdy_type& parameters_t::
Kdy ()
{
  return this->Kdy_.get ();
}

void parameters_t::
Kdy (const Kdy_type& x)
{
  this->Kdy_.set (x);
}

const parameters_t::Kpz_type& parameters_t::
Kpz () const
{
  return this->Kpz_.get ();
}

parameters_t::Kpz_type& parameters_t::
Kpz ()
{
  return this->Kpz_.get ();
}

void parameters_t::
Kpz (const Kpz_type& x)
{
  this->Kpz_.set (x);
}

const parameters_t::Kiz_type& parameters_t::
Kiz () const
{
  return this->Kiz_.get ();
}

parameters_t::Kiz_type& parameters_t::
Kiz ()
{
  return this->Kiz_.get ();
}

void parameters_t::
Kiz (const Kiz_type& x)
{
  this->Kiz_.set (x);
}

const parameters_t::Kdz_type& parameters_t::
Kdz () const
{
  return this->Kdz_.get ();
}

parameters_t::Kdz_type& parameters_t::
Kdz ()
{
  return this->Kdz_.get ();
}

void parameters_t::
Kdz (const Kdz_type& x)
{
  this->Kdz_.set (x);
}

const parameters_t::enable_UWB_type& parameters_t::
enable_UWB () const
{
  return this->enable_UWB_.get ();
}

parameters_t::enable_UWB_type& parameters_t::
enable_UWB ()
{
  return this->enable_UWB_.get ();
}

void parameters_t::
enable_UWB (const enable_UWB_type& x)
{
  this->enable_UWB_.set (x);
}

const parameters_t::dynamic_beacons_type& parameters_t::
dynamic_beacons () const
{
  return this->dynamic_beacons_.get ();
}

parameters_t::dynamic_beacons_type& parameters_t::
dynamic_beacons ()
{
  return this->dynamic_beacons_.get ();
}

void parameters_t::
dynamic_beacons (const dynamic_beacons_type& x)
{
  this->dynamic_beacons_.set (x);
}

const parameters_t::EKF_timestep_type& parameters_t::
EKF_timestep () const
{
  return this->EKF_timestep_.get ();
}

parameters_t::EKF_timestep_type& parameters_t::
EKF_timestep ()
{
  return this->EKF_timestep_.get ();
}

void parameters_t::
EKF_timestep (const EKF_timestep_type& x)
{
  this->EKF_timestep_.set (x);
}

const parameters_t::IMU_timestep_type& parameters_t::
IMU_timestep () const
{
  return this->IMU_timestep_.get ();
}

parameters_t::IMU_timestep_type& parameters_t::
IMU_timestep ()
{
  return this->IMU_timestep_.get ();
}

void parameters_t::
IMU_timestep (const IMU_timestep_type& x)
{
  this->IMU_timestep_.set (x);
}

const parameters_t::trajectory_frequency_type& parameters_t::
trajectory_frequency () const
{
  return this->trajectory_frequency_.get ();
}

parameters_t::trajectory_frequency_type& parameters_t::
trajectory_frequency ()
{
  return this->trajectory_frequency_.get ();
}

void parameters_t::
trajectory_frequency (const trajectory_frequency_type& x)
{
  this->trajectory_frequency_.set (x);
}

const parameters_t::UWB_frequency_type& parameters_t::
UWB_frequency () const
{
  return this->UWB_frequency_.get ();
}

parameters_t::UWB_frequency_type& parameters_t::
UWB_frequency ()
{
  return this->UWB_frequency_.get ();
}

void parameters_t::
UWB_frequency (const UWB_frequency_type& x)
{
  this->UWB_frequency_.set (x);
}

const parameters_t::UWB_D_frequency_type& parameters_t::
UWB_D_frequency () const
{
  return this->UWB_D_frequency_.get ();
}

parameters_t::UWB_D_frequency_type& parameters_t::
UWB_D_frequency ()
{
  return this->UWB_D_frequency_.get ();
}

void parameters_t::
UWB_D_frequency (const UWB_D_frequency_type& x)
{
  this->UWB_D_frequency_.set (x);
}

const parameters_t::UWB_signal_length_type& parameters_t::
UWB_signal_length () const
{
  return this->UWB_signal_length_.get ();
}

parameters_t::UWB_signal_length_type& parameters_t::
UWB_signal_length ()
{
  return this->UWB_signal_length_.get ();
}

void parameters_t::
UWB_signal_length (const UWB_signal_length_type& x)
{
  this->UWB_signal_length_.set (x);
}

const parameters_t::max_UWB_range_type& parameters_t::
max_UWB_range () const
{
  return this->max_UWB_range_.get ();
}

parameters_t::max_UWB_range_type& parameters_t::
max_UWB_range ()
{
  return this->max_UWB_range_.get ();
}

void parameters_t::
max_UWB_range (const max_UWB_range_type& x)
{
  this->max_UWB_range_.set (x);
}

const parameters_t::s_tdoa_type& parameters_t::
s_tdoa () const
{
  return this->s_tdoa_.get ();
}

parameters_t::s_tdoa_type& parameters_t::
s_tdoa ()
{
  return this->s_tdoa_.get ();
}

void parameters_t::
s_tdoa (const s_tdoa_type& x)
{
  this->s_tdoa_.set (x);
}

const parameters_t::s_twr_type& parameters_t::
s_twr () const
{
  return this->s_twr_.get ();
}

parameters_t::s_twr_type& parameters_t::
s_twr ()
{
  return this->s_twr_.get ();
}

void parameters_t::
s_twr (const s_twr_type& x)
{
  this->s_twr_.set (x);
}

const parameters_t::Q_type& parameters_t::
Q () const
{
  return this->Q_.get ();
}

parameters_t::Q_type& parameters_t::
Q ()
{
  return this->Q_.get ();
}

void parameters_t::
Q (const Q_type& x)
{
  this->Q_.set (x);
}

const parameters_t::kR_type& parameters_t::
kR () const
{
  return this->kR_.get ();
}

parameters_t::kR_type& parameters_t::
kR ()
{
  return this->kR_.get ();
}

void parameters_t::
kR (const kR_type& x)
{
  this->kR_.set (x);
}

const parameters_t::beacon_1_en_type& parameters_t::
beacon_1_en () const
{
  return this->beacon_1_en_.get ();
}

parameters_t::beacon_1_en_type& parameters_t::
beacon_1_en ()
{
  return this->beacon_1_en_.get ();
}

void parameters_t::
beacon_1_en (const beacon_1_en_type& x)
{
  this->beacon_1_en_.set (x);
}

const parameters_t::beacon_2_en_type& parameters_t::
beacon_2_en () const
{
  return this->beacon_2_en_.get ();
}

parameters_t::beacon_2_en_type& parameters_t::
beacon_2_en ()
{
  return this->beacon_2_en_.get ();
}

void parameters_t::
beacon_2_en (const beacon_2_en_type& x)
{
  this->beacon_2_en_.set (x);
}

const parameters_t::beacon_3_en_type& parameters_t::
beacon_3_en () const
{
  return this->beacon_3_en_.get ();
}

parameters_t::beacon_3_en_type& parameters_t::
beacon_3_en ()
{
  return this->beacon_3_en_.get ();
}

void parameters_t::
beacon_3_en (const beacon_3_en_type& x)
{
  this->beacon_3_en_.set (x);
}

const parameters_t::beacon_4_en_type& parameters_t::
beacon_4_en () const
{
  return this->beacon_4_en_.get ();
}

parameters_t::beacon_4_en_type& parameters_t::
beacon_4_en ()
{
  return this->beacon_4_en_.get ();
}

void parameters_t::
beacon_4_en (const beacon_4_en_type& x)
{
  this->beacon_4_en_.set (x);
}

const parameters_t::beacon_5_en_type& parameters_t::
beacon_5_en () const
{
  return this->beacon_5_en_.get ();
}

parameters_t::beacon_5_en_type& parameters_t::
beacon_5_en ()
{
  return this->beacon_5_en_.get ();
}

void parameters_t::
beacon_5_en (const beacon_5_en_type& x)
{
  this->beacon_5_en_.set (x);
}

const parameters_t::beacon_6_en_type& parameters_t::
beacon_6_en () const
{
  return this->beacon_6_en_.get ();
}

parameters_t::beacon_6_en_type& parameters_t::
beacon_6_en ()
{
  return this->beacon_6_en_.get ();
}

void parameters_t::
beacon_6_en (const beacon_6_en_type& x)
{
  this->beacon_6_en_.set (x);
}

const parameters_t::beacon_7_en_type& parameters_t::
beacon_7_en () const
{
  return this->beacon_7_en_.get ();
}

parameters_t::beacon_7_en_type& parameters_t::
beacon_7_en ()
{
  return this->beacon_7_en_.get ();
}

void parameters_t::
beacon_7_en (const beacon_7_en_type& x)
{
  this->beacon_7_en_.set (x);
}

const parameters_t::beacon_8_en_type& parameters_t::
beacon_8_en () const
{
  return this->beacon_8_en_.get ();
}

parameters_t::beacon_8_en_type& parameters_t::
beacon_8_en ()
{
  return this->beacon_8_en_.get ();
}

void parameters_t::
beacon_8_en (const beacon_8_en_type& x)
{
  this->beacon_8_en_.set (x);
}

const parameters_t::beacon_1_freq_type& parameters_t::
beacon_1_freq () const
{
  return this->beacon_1_freq_.get ();
}

parameters_t::beacon_1_freq_type& parameters_t::
beacon_1_freq ()
{
  return this->beacon_1_freq_.get ();
}

void parameters_t::
beacon_1_freq (const beacon_1_freq_type& x)
{
  this->beacon_1_freq_.set (x);
}

const parameters_t::beacon_2_freq_type& parameters_t::
beacon_2_freq () const
{
  return this->beacon_2_freq_.get ();
}

parameters_t::beacon_2_freq_type& parameters_t::
beacon_2_freq ()
{
  return this->beacon_2_freq_.get ();
}

void parameters_t::
beacon_2_freq (const beacon_2_freq_type& x)
{
  this->beacon_2_freq_.set (x);
}

const parameters_t::beacon_3_freq_type& parameters_t::
beacon_3_freq () const
{
  return this->beacon_3_freq_.get ();
}

parameters_t::beacon_3_freq_type& parameters_t::
beacon_3_freq ()
{
  return this->beacon_3_freq_.get ();
}

void parameters_t::
beacon_3_freq (const beacon_3_freq_type& x)
{
  this->beacon_3_freq_.set (x);
}

const parameters_t::beacon_4_freq_type& parameters_t::
beacon_4_freq () const
{
  return this->beacon_4_freq_.get ();
}

parameters_t::beacon_4_freq_type& parameters_t::
beacon_4_freq ()
{
  return this->beacon_4_freq_.get ();
}

void parameters_t::
beacon_4_freq (const beacon_4_freq_type& x)
{
  this->beacon_4_freq_.set (x);
}

const parameters_t::beacon_5_freq_type& parameters_t::
beacon_5_freq () const
{
  return this->beacon_5_freq_.get ();
}

parameters_t::beacon_5_freq_type& parameters_t::
beacon_5_freq ()
{
  return this->beacon_5_freq_.get ();
}

void parameters_t::
beacon_5_freq (const beacon_5_freq_type& x)
{
  this->beacon_5_freq_.set (x);
}

const parameters_t::beacon_6_freq_type& parameters_t::
beacon_6_freq () const
{
  return this->beacon_6_freq_.get ();
}

parameters_t::beacon_6_freq_type& parameters_t::
beacon_6_freq ()
{
  return this->beacon_6_freq_.get ();
}

void parameters_t::
beacon_6_freq (const beacon_6_freq_type& x)
{
  this->beacon_6_freq_.set (x);
}

const parameters_t::beacon_7_freq_type& parameters_t::
beacon_7_freq () const
{
  return this->beacon_7_freq_.get ();
}

parameters_t::beacon_7_freq_type& parameters_t::
beacon_7_freq ()
{
  return this->beacon_7_freq_.get ();
}

void parameters_t::
beacon_7_freq (const beacon_7_freq_type& x)
{
  this->beacon_7_freq_.set (x);
}

const parameters_t::beacon_8_freq_type& parameters_t::
beacon_8_freq () const
{
  return this->beacon_8_freq_.get ();
}

parameters_t::beacon_8_freq_type& parameters_t::
beacon_8_freq ()
{
  return this->beacon_8_freq_.get ();
}

void parameters_t::
beacon_8_freq (const beacon_8_freq_type& x)
{
  this->beacon_8_freq_.set (x);
}

const parameters_t::beacon_dynamic_freq_type& parameters_t::
beacon_dynamic_freq () const
{
  return this->beacon_dynamic_freq_.get ();
}

parameters_t::beacon_dynamic_freq_type& parameters_t::
beacon_dynamic_freq ()
{
  return this->beacon_dynamic_freq_.get ();
}

void parameters_t::
beacon_dynamic_freq (const beacon_dynamic_freq_type& x)
{
  this->beacon_dynamic_freq_.set (x);
}

const parameters_t::dynamic_cov_approach_type& parameters_t::
dynamic_cov_approach () const
{
  return this->dynamic_cov_approach_.get ();
}

parameters_t::dynamic_cov_approach_type& parameters_t::
dynamic_cov_approach ()
{
  return this->dynamic_cov_approach_.get ();
}

void parameters_t::
dynamic_cov_approach (const dynamic_cov_approach_type& x)
{
  this->dynamic_cov_approach_.set (x);
}

const parameters_t::beaconvelocity_type& parameters_t::
beaconvelocity () const
{
  return this->beaconvelocity_.get ();
}

parameters_t::beaconvelocity_type& parameters_t::
beaconvelocity ()
{
  return this->beaconvelocity_.get ();
}

void parameters_t::
beaconvelocity (const beaconvelocity_type& x)
{
  this->beaconvelocity_.set (x);
}

const parameters_t::x_beacon_1_type& parameters_t::
x_beacon_1 () const
{
  return this->x_beacon_1_.get ();
}

parameters_t::x_beacon_1_type& parameters_t::
x_beacon_1 ()
{
  return this->x_beacon_1_.get ();
}

void parameters_t::
x_beacon_1 (const x_beacon_1_type& x)
{
  this->x_beacon_1_.set (x);
}

const parameters_t::y_beacon_1_type& parameters_t::
y_beacon_1 () const
{
  return this->y_beacon_1_.get ();
}

parameters_t::y_beacon_1_type& parameters_t::
y_beacon_1 ()
{
  return this->y_beacon_1_.get ();
}

void parameters_t::
y_beacon_1 (const y_beacon_1_type& x)
{
  this->y_beacon_1_.set (x);
}

const parameters_t::x_beacon_2_type& parameters_t::
x_beacon_2 () const
{
  return this->x_beacon_2_.get ();
}

parameters_t::x_beacon_2_type& parameters_t::
x_beacon_2 ()
{
  return this->x_beacon_2_.get ();
}

void parameters_t::
x_beacon_2 (const x_beacon_2_type& x)
{
  this->x_beacon_2_.set (x);
}

const parameters_t::y_beacon_2_type& parameters_t::
y_beacon_2 () const
{
  return this->y_beacon_2_.get ();
}

parameters_t::y_beacon_2_type& parameters_t::
y_beacon_2 ()
{
  return this->y_beacon_2_.get ();
}

void parameters_t::
y_beacon_2 (const y_beacon_2_type& x)
{
  this->y_beacon_2_.set (x);
}

const parameters_t::x_beacon_3_type& parameters_t::
x_beacon_3 () const
{
  return this->x_beacon_3_.get ();
}

parameters_t::x_beacon_3_type& parameters_t::
x_beacon_3 ()
{
  return this->x_beacon_3_.get ();
}

void parameters_t::
x_beacon_3 (const x_beacon_3_type& x)
{
  this->x_beacon_3_.set (x);
}

const parameters_t::y_beacon_3_type& parameters_t::
y_beacon_3 () const
{
  return this->y_beacon_3_.get ();
}

parameters_t::y_beacon_3_type& parameters_t::
y_beacon_3 ()
{
  return this->y_beacon_3_.get ();
}

void parameters_t::
y_beacon_3 (const y_beacon_3_type& x)
{
  this->y_beacon_3_.set (x);
}

const parameters_t::x_beacon_4_type& parameters_t::
x_beacon_4 () const
{
  return this->x_beacon_4_.get ();
}

parameters_t::x_beacon_4_type& parameters_t::
x_beacon_4 ()
{
  return this->x_beacon_4_.get ();
}

void parameters_t::
x_beacon_4 (const x_beacon_4_type& x)
{
  this->x_beacon_4_.set (x);
}

const parameters_t::y_beacon_4_type& parameters_t::
y_beacon_4 () const
{
  return this->y_beacon_4_.get ();
}

parameters_t::y_beacon_4_type& parameters_t::
y_beacon_4 ()
{
  return this->y_beacon_4_.get ();
}

void parameters_t::
y_beacon_4 (const y_beacon_4_type& x)
{
  this->y_beacon_4_.set (x);
}

const parameters_t::x_beacon_5_type& parameters_t::
x_beacon_5 () const
{
  return this->x_beacon_5_.get ();
}

parameters_t::x_beacon_5_type& parameters_t::
x_beacon_5 ()
{
  return this->x_beacon_5_.get ();
}

void parameters_t::
x_beacon_5 (const x_beacon_5_type& x)
{
  this->x_beacon_5_.set (x);
}

const parameters_t::y_beacon_5_type& parameters_t::
y_beacon_5 () const
{
  return this->y_beacon_5_.get ();
}

parameters_t::y_beacon_5_type& parameters_t::
y_beacon_5 ()
{
  return this->y_beacon_5_.get ();
}

void parameters_t::
y_beacon_5 (const y_beacon_5_type& x)
{
  this->y_beacon_5_.set (x);
}

const parameters_t::x_beacon_6_type& parameters_t::
x_beacon_6 () const
{
  return this->x_beacon_6_.get ();
}

parameters_t::x_beacon_6_type& parameters_t::
x_beacon_6 ()
{
  return this->x_beacon_6_.get ();
}

void parameters_t::
x_beacon_6 (const x_beacon_6_type& x)
{
  this->x_beacon_6_.set (x);
}

const parameters_t::y_beacon_6_type& parameters_t::
y_beacon_6 () const
{
  return this->y_beacon_6_.get ();
}

parameters_t::y_beacon_6_type& parameters_t::
y_beacon_6 ()
{
  return this->y_beacon_6_.get ();
}

void parameters_t::
y_beacon_6 (const y_beacon_6_type& x)
{
  this->y_beacon_6_.set (x);
}

const parameters_t::x_beacon_7_type& parameters_t::
x_beacon_7 () const
{
  return this->x_beacon_7_.get ();
}

parameters_t::x_beacon_7_type& parameters_t::
x_beacon_7 ()
{
  return this->x_beacon_7_.get ();
}

void parameters_t::
x_beacon_7 (const x_beacon_7_type& x)
{
  this->x_beacon_7_.set (x);
}

const parameters_t::y_beacon_7_type& parameters_t::
y_beacon_7 () const
{
  return this->y_beacon_7_.get ();
}

parameters_t::y_beacon_7_type& parameters_t::
y_beacon_7 ()
{
  return this->y_beacon_7_.get ();
}

void parameters_t::
y_beacon_7 (const y_beacon_7_type& x)
{
  this->y_beacon_7_.set (x);
}

const parameters_t::x_beacon_8_type& parameters_t::
x_beacon_8 () const
{
  return this->x_beacon_8_.get ();
}

parameters_t::x_beacon_8_type& parameters_t::
x_beacon_8 ()
{
  return this->x_beacon_8_.get ();
}

void parameters_t::
x_beacon_8 (const x_beacon_8_type& x)
{
  this->x_beacon_8_.set (x);
}

const parameters_t::y_beacon_8_type& parameters_t::
y_beacon_8 () const
{
  return this->y_beacon_8_.get ();
}

parameters_t::y_beacon_8_type& parameters_t::
y_beacon_8 ()
{
  return this->y_beacon_8_.get ();
}

void parameters_t::
y_beacon_8 (const y_beacon_8_type& x)
{
  this->y_beacon_8_.set (x);
}

const parameters_t::acc_noise_sigma_type& parameters_t::
acc_noise_sigma () const
{
  return this->acc_noise_sigma_.get ();
}

parameters_t::acc_noise_sigma_type& parameters_t::
acc_noise_sigma ()
{
  return this->acc_noise_sigma_.get ();
}

void parameters_t::
acc_noise_sigma (const acc_noise_sigma_type& x)
{
  this->acc_noise_sigma_.set (x);
}

const parameters_t::noise_motor_sigma_type& parameters_t::
noise_motor_sigma () const
{
  return this->noise_motor_sigma_.get ();
}

parameters_t::noise_motor_sigma_type& parameters_t::
noise_motor_sigma ()
{
  return this->noise_motor_sigma_.get ();
}

void parameters_t::
noise_motor_sigma (const noise_motor_sigma_type& x)
{
  this->noise_motor_sigma_.set (x);
}

const parameters_t::noise_type_type& parameters_t::
noise_type () const
{
  return this->noise_type_.get ();
}

parameters_t::noise_type_type& parameters_t::
noise_type ()
{
  return this->noise_type_.get ();
}

void parameters_t::
noise_type (const noise_type_type& x)
{
  this->noise_type_.set (x);
}

const parameters_t::gauss_sigma_type& parameters_t::
gauss_sigma () const
{
  return this->gauss_sigma_.get ();
}

parameters_t::gauss_sigma_type& parameters_t::
gauss_sigma ()
{
  return this->gauss_sigma_.get ();
}

void parameters_t::
gauss_sigma (const gauss_sigma_type& x)
{
  this->gauss_sigma_.set (x);
}

const parameters_t::gauss_sigma_twr_type& parameters_t::
gauss_sigma_twr () const
{
  return this->gauss_sigma_twr_.get ();
}

parameters_t::gauss_sigma_twr_type& parameters_t::
gauss_sigma_twr ()
{
  return this->gauss_sigma_twr_.get ();
}

void parameters_t::
gauss_sigma_twr (const gauss_sigma_twr_type& x)
{
  this->gauss_sigma_twr_.set (x);
}

const parameters_t::gauss_sigma_tdoa_type& parameters_t::
gauss_sigma_tdoa () const
{
  return this->gauss_sigma_tdoa_.get ();
}

parameters_t::gauss_sigma_tdoa_type& parameters_t::
gauss_sigma_tdoa ()
{
  return this->gauss_sigma_tdoa_.get ();
}

void parameters_t::
gauss_sigma_tdoa (const gauss_sigma_tdoa_type& x)
{
  this->gauss_sigma_tdoa_.set (x);
}

const parameters_t::htc_gamma_type& parameters_t::
htc_gamma () const
{
  return this->htc_gamma_.get ();
}

parameters_t::htc_gamma_type& parameters_t::
htc_gamma ()
{
  return this->htc_gamma_.get ();
}

void parameters_t::
htc_gamma (const htc_gamma_type& x)
{
  this->htc_gamma_.set (x);
}

const parameters_t::htc_ratio_type& parameters_t::
htc_ratio () const
{
  return this->htc_ratio_.get ();
}

parameters_t::htc_ratio_type& parameters_t::
htc_ratio ()
{
  return this->htc_ratio_.get ();
}

void parameters_t::
htc_ratio (const htc_ratio_type& x)
{
  this->htc_ratio_.set (x);
}

const parameters_t::htg_mu_type& parameters_t::
htg_mu () const
{
  return this->htg_mu_.get ();
}

parameters_t::htg_mu_type& parameters_t::
htg_mu ()
{
  return this->htg_mu_.get ();
}

void parameters_t::
htg_mu (const htg_mu_type& x)
{
  this->htg_mu_.set (x);
}

const parameters_t::htg_k_type& parameters_t::
htg_k () const
{
  return this->htg_k_.get ();
}

parameters_t::htg_k_type& parameters_t::
htg_k ()
{
  return this->htg_k_.get ();
}

void parameters_t::
htg_k (const htg_k_type& x)
{
  this->htg_k_.set (x);
}

const parameters_t::htg_lambda_type& parameters_t::
htg_lambda () const
{
  return this->htg_lambda_.get ();
}

parameters_t::htg_lambda_type& parameters_t::
htg_lambda ()
{
  return this->htg_lambda_.get ();
}

void parameters_t::
htg_lambda (const htg_lambda_type& x)
{
  this->htg_lambda_.set (x);
}

const parameters_t::htg_scale_type& parameters_t::
htg_scale () const
{
  return this->htg_scale_.get ();
}

parameters_t::htg_scale_type& parameters_t::
htg_scale ()
{
  return this->htg_scale_.get ();
}

void parameters_t::
htg_scale (const htg_scale_type& x)
{
  this->htg_scale_.set (x);
}

const parameters_t::terminaloutput_type& parameters_t::
terminaloutput () const
{
  return this->terminaloutput_.get ();
}

parameters_t::terminaloutput_type& parameters_t::
terminaloutput ()
{
  return this->terminaloutput_.get ();
}

void parameters_t::
terminaloutput (const terminaloutput_type& x)
{
  this->terminaloutput_.set (x);
}

const parameters_t::simulation_updatefreq_type& parameters_t::
simulation_updatefreq () const
{
  return this->simulation_updatefreq_.get ();
}

parameters_t::simulation_updatefreq_type& parameters_t::
simulation_updatefreq ()
{
  return this->simulation_updatefreq_.get ();
}

void parameters_t::
simulation_updatefreq (const simulation_updatefreq_type& x)
{
  this->simulation_updatefreq_.set (x);
}

const parameters_t::simulation_realtimefactor_type& parameters_t::
simulation_realtimefactor () const
{
  return this->simulation_realtimefactor_.get ();
}

parameters_t::simulation_realtimefactor_type& parameters_t::
simulation_realtimefactor ()
{
  return this->simulation_realtimefactor_.get ();
}

void parameters_t::
simulation_realtimefactor (const simulation_realtimefactor_type& x)
{
  this->simulation_realtimefactor_.set (x);
}

const parameters_t::time_limit_type& parameters_t::
time_limit () const
{
  return this->time_limit_.get ();
}

parameters_t::time_limit_type& parameters_t::
time_limit ()
{
  return this->time_limit_.get ();
}

void parameters_t::
time_limit (const time_limit_type& x)
{
  this->time_limit_.set (x);
}

const parameters_t::environment_type& parameters_t::
environment () const
{
  return this->environment_.get ();
}

parameters_t::environment_type& parameters_t::
environment ()
{
  return this->environment_.get ();
}

void parameters_t::
environment (const environment_type& x)
{
  this->environment_.set (x);
}

void parameters_t::
environment (::std::auto_ptr< environment_type > x)
{
  this->environment_.set (x);
}

const parameters_t::window_width_type& parameters_t::
window_width () const
{
  return this->window_width_.get ();
}

parameters_t::window_width_type& parameters_t::
window_width ()
{
  return this->window_width_.get ();
}

void parameters_t::
window_width (const window_width_type& x)
{
  this->window_width_.set (x);
}

const parameters_t::window_height_type& parameters_t::
window_height () const
{
  return this->window_height_.get ();
}

parameters_t::window_height_type& parameters_t::
window_height ()
{
  return this->window_height_.get ();
}

void parameters_t::
window_height (const window_height_type& x)
{
  this->window_height_.set (x);
}

const parameters_t::scale_type& parameters_t::
scale () const
{
  return this->scale_.get ();
}

parameters_t::scale_type& parameters_t::
scale ()
{
  return this->scale_.get ();
}

void parameters_t::
scale (const scale_type& x)
{
  this->scale_.set (x);
}

const parameters_t::mouse_drag_speed_type& parameters_t::
mouse_drag_speed () const
{
  return this->mouse_drag_speed_.get ();
}

parameters_t::mouse_drag_speed_type& parameters_t::
mouse_drag_speed ()
{
  return this->mouse_drag_speed_.get ();
}

void parameters_t::
mouse_drag_speed (const mouse_drag_speed_type& x)
{
  this->mouse_drag_speed_.set (x);
}

const parameters_t::mouse_zoom_speed_type& parameters_t::
mouse_zoom_speed () const
{
  return this->mouse_zoom_speed_.get ();
}

parameters_t::mouse_zoom_speed_type& parameters_t::
mouse_zoom_speed ()
{
  return this->mouse_zoom_speed_.get ();
}

void parameters_t::
mouse_zoom_speed (const mouse_zoom_speed_type& x)
{
  this->mouse_zoom_speed_.set (x);
}

const parameters_t::zoom_type& parameters_t::
zoom () const
{
  return this->zoom_.get ();
}

parameters_t::zoom_type& parameters_t::
zoom ()
{
  return this->zoom_.get ();
}

void parameters_t::
zoom (const zoom_type& x)
{
  this->zoom_.set (x);
}

const parameters_t::animation_updatefreq_type& parameters_t::
animation_updatefreq () const
{
  return this->animation_updatefreq_.get ();
}

parameters_t::animation_updatefreq_type& parameters_t::
animation_updatefreq ()
{
  return this->animation_updatefreq_.get ();
}

void parameters_t::
animation_updatefreq (const animation_updatefreq_type& x)
{
  this->animation_updatefreq_.set (x);
}

const parameters_t::logger_updatefreq_type& parameters_t::
logger_updatefreq () const
{
  return this->logger_updatefreq_.get ();
}

parameters_t::logger_updatefreq_type& parameters_t::
logger_updatefreq ()
{
  return this->logger_updatefreq_.get ();
}

void parameters_t::
logger_updatefreq (const logger_updatefreq_type& x)
{
  this->logger_updatefreq_.set (x);
}

const parameters_t::policy_type& parameters_t::
policy () const
{
  return this->policy_.get ();
}

parameters_t::policy_type& parameters_t::
policy ()
{
  return this->policy_.get ();
}

void parameters_t::
policy (const policy_type& x)
{
  this->policy_.set (x);
}

void parameters_t::
policy (::std::auto_ptr< policy_type > x)
{
  this->policy_.set (x);
}

const parameters_t::fitness_type& parameters_t::
fitness () const
{
  return this->fitness_.get ();
}

parameters_t::fitness_type& parameters_t::
fitness ()
{
  return this->fitness_.get ();
}

void parameters_t::
fitness (const fitness_type& x)
{
  this->fitness_.set (x);
}

void parameters_t::
fitness (::std::auto_ptr< fitness_type > x)
{
  this->fitness_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// parameters_t
//

parameters_t::
parameters_t (const Kpphi_type& Kpphi,
              const Kiphi_type& Kiphi,
              const Kdphi_type& Kdphi,
              const Kptheta_type& Kptheta,
              const Kitheta_type& Kitheta,
              const Kdtheta_type& Kdtheta,
              const Kpx_type& Kpx,
              const Kix_type& Kix,
              const Kdx_type& Kdx,
              const Kpy_type& Kpy,
              const Kiy_type& Kiy,
              const Kdy_type& Kdy,
              const Kpz_type& Kpz,
              const Kiz_type& Kiz,
              const Kdz_type& Kdz,
              const enable_UWB_type& enable_UWB,
              const dynamic_beacons_type& dynamic_beacons,
              const EKF_timestep_type& EKF_timestep,
              const IMU_timestep_type& IMU_timestep,
              const trajectory_frequency_type& trajectory_frequency,
              const UWB_frequency_type& UWB_frequency,
              const UWB_D_frequency_type& UWB_D_frequency,
              const UWB_signal_length_type& UWB_signal_length,
              const max_UWB_range_type& max_UWB_range,
              const s_tdoa_type& s_tdoa,
              const s_twr_type& s_twr,
              const Q_type& Q,
              const kR_type& kR,
              const beacon_1_en_type& beacon_1_en,
              const beacon_2_en_type& beacon_2_en,
              const beacon_3_en_type& beacon_3_en,
              const beacon_4_en_type& beacon_4_en,
              const beacon_5_en_type& beacon_5_en,
              const beacon_6_en_type& beacon_6_en,
              const beacon_7_en_type& beacon_7_en,
              const beacon_8_en_type& beacon_8_en,
              const beacon_1_freq_type& beacon_1_freq,
              const beacon_2_freq_type& beacon_2_freq,
              const beacon_3_freq_type& beacon_3_freq,
              const beacon_4_freq_type& beacon_4_freq,
              const beacon_5_freq_type& beacon_5_freq,
              const beacon_6_freq_type& beacon_6_freq,
              const beacon_7_freq_type& beacon_7_freq,
              const beacon_8_freq_type& beacon_8_freq,
              const beacon_dynamic_freq_type& beacon_dynamic_freq,
              const dynamic_cov_approach_type& dynamic_cov_approach,
              const beaconvelocity_type& beaconvelocity,
              const x_beacon_1_type& x_beacon_1,
              const y_beacon_1_type& y_beacon_1,
              const x_beacon_2_type& x_beacon_2,
              const y_beacon_2_type& y_beacon_2,
              const x_beacon_3_type& x_beacon_3,
              const y_beacon_3_type& y_beacon_3,
              const x_beacon_4_type& x_beacon_4,
              const y_beacon_4_type& y_beacon_4,
              const x_beacon_5_type& x_beacon_5,
              const y_beacon_5_type& y_beacon_5,
              const x_beacon_6_type& x_beacon_6,
              const y_beacon_6_type& y_beacon_6,
              const x_beacon_7_type& x_beacon_7,
              const y_beacon_7_type& y_beacon_7,
              const x_beacon_8_type& x_beacon_8,
              const y_beacon_8_type& y_beacon_8,
              const acc_noise_sigma_type& acc_noise_sigma,
              const noise_motor_sigma_type& noise_motor_sigma,
              const noise_type_type& noise_type,
              const gauss_sigma_type& gauss_sigma,
              const gauss_sigma_twr_type& gauss_sigma_twr,
              const gauss_sigma_tdoa_type& gauss_sigma_tdoa,
              const htc_gamma_type& htc_gamma,
              const htc_ratio_type& htc_ratio,
              const htg_mu_type& htg_mu,
              const htg_k_type& htg_k,
              const htg_lambda_type& htg_lambda,
              const htg_scale_type& htg_scale,
              const terminaloutput_type& terminaloutput,
              const simulation_updatefreq_type& simulation_updatefreq,
              const simulation_realtimefactor_type& simulation_realtimefactor,
              const time_limit_type& time_limit,
              const environment_type& environment,
              const window_width_type& window_width,
              const window_height_type& window_height,
              const scale_type& scale,
              const mouse_drag_speed_type& mouse_drag_speed,
              const mouse_zoom_speed_type& mouse_zoom_speed,
              const zoom_type& zoom,
              const animation_updatefreq_type& animation_updatefreq,
              const logger_updatefreq_type& logger_updatefreq,
              const policy_type& policy,
              const fitness_type& fitness)
: ::xml_schema::type (),
  Kpphi_ (Kpphi, this),
  Kiphi_ (Kiphi, this),
  Kdphi_ (Kdphi, this),
  Kptheta_ (Kptheta, this),
  Kitheta_ (Kitheta, this),
  Kdtheta_ (Kdtheta, this),
  Kpx_ (Kpx, this),
  Kix_ (Kix, this),
  Kdx_ (Kdx, this),
  Kpy_ (Kpy, this),
  Kiy_ (Kiy, this),
  Kdy_ (Kdy, this),
  Kpz_ (Kpz, this),
  Kiz_ (Kiz, this),
  Kdz_ (Kdz, this),
  enable_UWB_ (enable_UWB, this),
  dynamic_beacons_ (dynamic_beacons, this),
  EKF_timestep_ (EKF_timestep, this),
  IMU_timestep_ (IMU_timestep, this),
  trajectory_frequency_ (trajectory_frequency, this),
  UWB_frequency_ (UWB_frequency, this),
  UWB_D_frequency_ (UWB_D_frequency, this),
  UWB_signal_length_ (UWB_signal_length, this),
  max_UWB_range_ (max_UWB_range, this),
  s_tdoa_ (s_tdoa, this),
  s_twr_ (s_twr, this),
  Q_ (Q, this),
  kR_ (kR, this),
  beacon_1_en_ (beacon_1_en, this),
  beacon_2_en_ (beacon_2_en, this),
  beacon_3_en_ (beacon_3_en, this),
  beacon_4_en_ (beacon_4_en, this),
  beacon_5_en_ (beacon_5_en, this),
  beacon_6_en_ (beacon_6_en, this),
  beacon_7_en_ (beacon_7_en, this),
  beacon_8_en_ (beacon_8_en, this),
  beacon_1_freq_ (beacon_1_freq, this),
  beacon_2_freq_ (beacon_2_freq, this),
  beacon_3_freq_ (beacon_3_freq, this),
  beacon_4_freq_ (beacon_4_freq, this),
  beacon_5_freq_ (beacon_5_freq, this),
  beacon_6_freq_ (beacon_6_freq, this),
  beacon_7_freq_ (beacon_7_freq, this),
  beacon_8_freq_ (beacon_8_freq, this),
  beacon_dynamic_freq_ (beacon_dynamic_freq, this),
  dynamic_cov_approach_ (dynamic_cov_approach, this),
  beaconvelocity_ (beaconvelocity, this),
  x_beacon_1_ (x_beacon_1, this),
  y_beacon_1_ (y_beacon_1, this),
  x_beacon_2_ (x_beacon_2, this),
  y_beacon_2_ (y_beacon_2, this),
  x_beacon_3_ (x_beacon_3, this),
  y_beacon_3_ (y_beacon_3, this),
  x_beacon_4_ (x_beacon_4, this),
  y_beacon_4_ (y_beacon_4, this),
  x_beacon_5_ (x_beacon_5, this),
  y_beacon_5_ (y_beacon_5, this),
  x_beacon_6_ (x_beacon_6, this),
  y_beacon_6_ (y_beacon_6, this),
  x_beacon_7_ (x_beacon_7, this),
  y_beacon_7_ (y_beacon_7, this),
  x_beacon_8_ (x_beacon_8, this),
  y_beacon_8_ (y_beacon_8, this),
  acc_noise_sigma_ (acc_noise_sigma, this),
  noise_motor_sigma_ (noise_motor_sigma, this),
  noise_type_ (noise_type, this),
  gauss_sigma_ (gauss_sigma, this),
  gauss_sigma_twr_ (gauss_sigma_twr, this),
  gauss_sigma_tdoa_ (gauss_sigma_tdoa, this),
  htc_gamma_ (htc_gamma, this),
  htc_ratio_ (htc_ratio, this),
  htg_mu_ (htg_mu, this),
  htg_k_ (htg_k, this),
  htg_lambda_ (htg_lambda, this),
  htg_scale_ (htg_scale, this),
  terminaloutput_ (terminaloutput, this),
  simulation_updatefreq_ (simulation_updatefreq, this),
  simulation_realtimefactor_ (simulation_realtimefactor, this),
  time_limit_ (time_limit, this),
  environment_ (environment, this),
  window_width_ (window_width, this),
  window_height_ (window_height, this),
  scale_ (scale, this),
  mouse_drag_speed_ (mouse_drag_speed, this),
  mouse_zoom_speed_ (mouse_zoom_speed, this),
  zoom_ (zoom, this),
  animation_updatefreq_ (animation_updatefreq, this),
  logger_updatefreq_ (logger_updatefreq, this),
  policy_ (policy, this),
  fitness_ (fitness, this)
{
}

parameters_t::
parameters_t (const parameters_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Kpphi_ (x.Kpphi_, f, this),
  Kiphi_ (x.Kiphi_, f, this),
  Kdphi_ (x.Kdphi_, f, this),
  Kptheta_ (x.Kptheta_, f, this),
  Kitheta_ (x.Kitheta_, f, this),
  Kdtheta_ (x.Kdtheta_, f, this),
  Kpx_ (x.Kpx_, f, this),
  Kix_ (x.Kix_, f, this),
  Kdx_ (x.Kdx_, f, this),
  Kpy_ (x.Kpy_, f, this),
  Kiy_ (x.Kiy_, f, this),
  Kdy_ (x.Kdy_, f, this),
  Kpz_ (x.Kpz_, f, this),
  Kiz_ (x.Kiz_, f, this),
  Kdz_ (x.Kdz_, f, this),
  enable_UWB_ (x.enable_UWB_, f, this),
  dynamic_beacons_ (x.dynamic_beacons_, f, this),
  EKF_timestep_ (x.EKF_timestep_, f, this),
  IMU_timestep_ (x.IMU_timestep_, f, this),
  trajectory_frequency_ (x.trajectory_frequency_, f, this),
  UWB_frequency_ (x.UWB_frequency_, f, this),
  UWB_D_frequency_ (x.UWB_D_frequency_, f, this),
  UWB_signal_length_ (x.UWB_signal_length_, f, this),
  max_UWB_range_ (x.max_UWB_range_, f, this),
  s_tdoa_ (x.s_tdoa_, f, this),
  s_twr_ (x.s_twr_, f, this),
  Q_ (x.Q_, f, this),
  kR_ (x.kR_, f, this),
  beacon_1_en_ (x.beacon_1_en_, f, this),
  beacon_2_en_ (x.beacon_2_en_, f, this),
  beacon_3_en_ (x.beacon_3_en_, f, this),
  beacon_4_en_ (x.beacon_4_en_, f, this),
  beacon_5_en_ (x.beacon_5_en_, f, this),
  beacon_6_en_ (x.beacon_6_en_, f, this),
  beacon_7_en_ (x.beacon_7_en_, f, this),
  beacon_8_en_ (x.beacon_8_en_, f, this),
  beacon_1_freq_ (x.beacon_1_freq_, f, this),
  beacon_2_freq_ (x.beacon_2_freq_, f, this),
  beacon_3_freq_ (x.beacon_3_freq_, f, this),
  beacon_4_freq_ (x.beacon_4_freq_, f, this),
  beacon_5_freq_ (x.beacon_5_freq_, f, this),
  beacon_6_freq_ (x.beacon_6_freq_, f, this),
  beacon_7_freq_ (x.beacon_7_freq_, f, this),
  beacon_8_freq_ (x.beacon_8_freq_, f, this),
  beacon_dynamic_freq_ (x.beacon_dynamic_freq_, f, this),
  dynamic_cov_approach_ (x.dynamic_cov_approach_, f, this),
  beaconvelocity_ (x.beaconvelocity_, f, this),
  x_beacon_1_ (x.x_beacon_1_, f, this),
  y_beacon_1_ (x.y_beacon_1_, f, this),
  x_beacon_2_ (x.x_beacon_2_, f, this),
  y_beacon_2_ (x.y_beacon_2_, f, this),
  x_beacon_3_ (x.x_beacon_3_, f, this),
  y_beacon_3_ (x.y_beacon_3_, f, this),
  x_beacon_4_ (x.x_beacon_4_, f, this),
  y_beacon_4_ (x.y_beacon_4_, f, this),
  x_beacon_5_ (x.x_beacon_5_, f, this),
  y_beacon_5_ (x.y_beacon_5_, f, this),
  x_beacon_6_ (x.x_beacon_6_, f, this),
  y_beacon_6_ (x.y_beacon_6_, f, this),
  x_beacon_7_ (x.x_beacon_7_, f, this),
  y_beacon_7_ (x.y_beacon_7_, f, this),
  x_beacon_8_ (x.x_beacon_8_, f, this),
  y_beacon_8_ (x.y_beacon_8_, f, this),
  acc_noise_sigma_ (x.acc_noise_sigma_, f, this),
  noise_motor_sigma_ (x.noise_motor_sigma_, f, this),
  noise_type_ (x.noise_type_, f, this),
  gauss_sigma_ (x.gauss_sigma_, f, this),
  gauss_sigma_twr_ (x.gauss_sigma_twr_, f, this),
  gauss_sigma_tdoa_ (x.gauss_sigma_tdoa_, f, this),
  htc_gamma_ (x.htc_gamma_, f, this),
  htc_ratio_ (x.htc_ratio_, f, this),
  htg_mu_ (x.htg_mu_, f, this),
  htg_k_ (x.htg_k_, f, this),
  htg_lambda_ (x.htg_lambda_, f, this),
  htg_scale_ (x.htg_scale_, f, this),
  terminaloutput_ (x.terminaloutput_, f, this),
  simulation_updatefreq_ (x.simulation_updatefreq_, f, this),
  simulation_realtimefactor_ (x.simulation_realtimefactor_, f, this),
  time_limit_ (x.time_limit_, f, this),
  environment_ (x.environment_, f, this),
  window_width_ (x.window_width_, f, this),
  window_height_ (x.window_height_, f, this),
  scale_ (x.scale_, f, this),
  mouse_drag_speed_ (x.mouse_drag_speed_, f, this),
  mouse_zoom_speed_ (x.mouse_zoom_speed_, f, this),
  zoom_ (x.zoom_, f, this),
  animation_updatefreq_ (x.animation_updatefreq_, f, this),
  logger_updatefreq_ (x.logger_updatefreq_, f, this),
  policy_ (x.policy_, f, this),
  fitness_ (x.fitness_, f, this)
{
}

parameters_t::
parameters_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Kpphi_ (this),
  Kiphi_ (this),
  Kdphi_ (this),
  Kptheta_ (this),
  Kitheta_ (this),
  Kdtheta_ (this),
  Kpx_ (this),
  Kix_ (this),
  Kdx_ (this),
  Kpy_ (this),
  Kiy_ (this),
  Kdy_ (this),
  Kpz_ (this),
  Kiz_ (this),
  Kdz_ (this),
  enable_UWB_ (this),
  dynamic_beacons_ (this),
  EKF_timestep_ (this),
  IMU_timestep_ (this),
  trajectory_frequency_ (this),
  UWB_frequency_ (this),
  UWB_D_frequency_ (this),
  UWB_signal_length_ (this),
  max_UWB_range_ (this),
  s_tdoa_ (this),
  s_twr_ (this),
  Q_ (this),
  kR_ (this),
  beacon_1_en_ (this),
  beacon_2_en_ (this),
  beacon_3_en_ (this),
  beacon_4_en_ (this),
  beacon_5_en_ (this),
  beacon_6_en_ (this),
  beacon_7_en_ (this),
  beacon_8_en_ (this),
  beacon_1_freq_ (this),
  beacon_2_freq_ (this),
  beacon_3_freq_ (this),
  beacon_4_freq_ (this),
  beacon_5_freq_ (this),
  beacon_6_freq_ (this),
  beacon_7_freq_ (this),
  beacon_8_freq_ (this),
  beacon_dynamic_freq_ (this),
  dynamic_cov_approach_ (this),
  beaconvelocity_ (this),
  x_beacon_1_ (this),
  y_beacon_1_ (this),
  x_beacon_2_ (this),
  y_beacon_2_ (this),
  x_beacon_3_ (this),
  y_beacon_3_ (this),
  x_beacon_4_ (this),
  y_beacon_4_ (this),
  x_beacon_5_ (this),
  y_beacon_5_ (this),
  x_beacon_6_ (this),
  y_beacon_6_ (this),
  x_beacon_7_ (this),
  y_beacon_7_ (this),
  x_beacon_8_ (this),
  y_beacon_8_ (this),
  acc_noise_sigma_ (this),
  noise_motor_sigma_ (this),
  noise_type_ (this),
  gauss_sigma_ (this),
  gauss_sigma_twr_ (this),
  gauss_sigma_tdoa_ (this),
  htc_gamma_ (this),
  htc_ratio_ (this),
  htg_mu_ (this),
  htg_k_ (this),
  htg_lambda_ (this),
  htg_scale_ (this),
  terminaloutput_ (this),
  simulation_updatefreq_ (this),
  simulation_realtimefactor_ (this),
  time_limit_ (this),
  environment_ (this),
  window_width_ (this),
  window_height_ (this),
  scale_ (this),
  mouse_drag_speed_ (this),
  mouse_zoom_speed_ (this),
  zoom_ (this),
  animation_updatefreq_ (this),
  logger_updatefreq_ (this),
  policy_ (this),
  fitness_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void parameters_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Kpphi
    //
    if (n.name () == "Kpphi" && n.namespace_ ().empty ())
    {
      if (!Kpphi_.present ())
      {
        this->Kpphi_.set (Kpphi_traits::create (i, f, this));
        continue;
      }
    }

    // Kiphi
    //
    if (n.name () == "Kiphi" && n.namespace_ ().empty ())
    {
      if (!Kiphi_.present ())
      {
        this->Kiphi_.set (Kiphi_traits::create (i, f, this));
        continue;
      }
    }

    // Kdphi
    //
    if (n.name () == "Kdphi" && n.namespace_ ().empty ())
    {
      if (!Kdphi_.present ())
      {
        this->Kdphi_.set (Kdphi_traits::create (i, f, this));
        continue;
      }
    }

    // Kptheta
    //
    if (n.name () == "Kptheta" && n.namespace_ ().empty ())
    {
      if (!Kptheta_.present ())
      {
        this->Kptheta_.set (Kptheta_traits::create (i, f, this));
        continue;
      }
    }

    // Kitheta
    //
    if (n.name () == "Kitheta" && n.namespace_ ().empty ())
    {
      if (!Kitheta_.present ())
      {
        this->Kitheta_.set (Kitheta_traits::create (i, f, this));
        continue;
      }
    }

    // Kdtheta
    //
    if (n.name () == "Kdtheta" && n.namespace_ ().empty ())
    {
      if (!Kdtheta_.present ())
      {
        this->Kdtheta_.set (Kdtheta_traits::create (i, f, this));
        continue;
      }
    }

    // Kpx
    //
    if (n.name () == "Kpx" && n.namespace_ ().empty ())
    {
      if (!Kpx_.present ())
      {
        this->Kpx_.set (Kpx_traits::create (i, f, this));
        continue;
      }
    }

    // Kix
    //
    if (n.name () == "Kix" && n.namespace_ ().empty ())
    {
      if (!Kix_.present ())
      {
        this->Kix_.set (Kix_traits::create (i, f, this));
        continue;
      }
    }

    // Kdx
    //
    if (n.name () == "Kdx" && n.namespace_ ().empty ())
    {
      if (!Kdx_.present ())
      {
        this->Kdx_.set (Kdx_traits::create (i, f, this));
        continue;
      }
    }

    // Kpy
    //
    if (n.name () == "Kpy" && n.namespace_ ().empty ())
    {
      if (!Kpy_.present ())
      {
        this->Kpy_.set (Kpy_traits::create (i, f, this));
        continue;
      }
    }

    // Kiy
    //
    if (n.name () == "Kiy" && n.namespace_ ().empty ())
    {
      if (!Kiy_.present ())
      {
        this->Kiy_.set (Kiy_traits::create (i, f, this));
        continue;
      }
    }

    // Kdy
    //
    if (n.name () == "Kdy" && n.namespace_ ().empty ())
    {
      if (!Kdy_.present ())
      {
        this->Kdy_.set (Kdy_traits::create (i, f, this));
        continue;
      }
    }

    // Kpz
    //
    if (n.name () == "Kpz" && n.namespace_ ().empty ())
    {
      if (!Kpz_.present ())
      {
        this->Kpz_.set (Kpz_traits::create (i, f, this));
        continue;
      }
    }

    // Kiz
    //
    if (n.name () == "Kiz" && n.namespace_ ().empty ())
    {
      if (!Kiz_.present ())
      {
        this->Kiz_.set (Kiz_traits::create (i, f, this));
        continue;
      }
    }

    // Kdz
    //
    if (n.name () == "Kdz" && n.namespace_ ().empty ())
    {
      if (!Kdz_.present ())
      {
        this->Kdz_.set (Kdz_traits::create (i, f, this));
        continue;
      }
    }

    // enable_UWB
    //
    if (n.name () == "enable_UWB" && n.namespace_ ().empty ())
    {
      if (!enable_UWB_.present ())
      {
        this->enable_UWB_.set (enable_UWB_traits::create (i, f, this));
        continue;
      }
    }

    // dynamic_beacons
    //
    if (n.name () == "dynamic_beacons" && n.namespace_ ().empty ())
    {
      if (!dynamic_beacons_.present ())
      {
        this->dynamic_beacons_.set (dynamic_beacons_traits::create (i, f, this));
        continue;
      }
    }

    // EKF_timestep
    //
    if (n.name () == "EKF_timestep" && n.namespace_ ().empty ())
    {
      if (!EKF_timestep_.present ())
      {
        this->EKF_timestep_.set (EKF_timestep_traits::create (i, f, this));
        continue;
      }
    }

    // IMU_timestep
    //
    if (n.name () == "IMU_timestep" && n.namespace_ ().empty ())
    {
      if (!IMU_timestep_.present ())
      {
        this->IMU_timestep_.set (IMU_timestep_traits::create (i, f, this));
        continue;
      }
    }

    // trajectory_frequency
    //
    if (n.name () == "trajectory_frequency" && n.namespace_ ().empty ())
    {
      if (!trajectory_frequency_.present ())
      {
        this->trajectory_frequency_.set (trajectory_frequency_traits::create (i, f, this));
        continue;
      }
    }

    // UWB_frequency
    //
    if (n.name () == "UWB_frequency" && n.namespace_ ().empty ())
    {
      if (!UWB_frequency_.present ())
      {
        this->UWB_frequency_.set (UWB_frequency_traits::create (i, f, this));
        continue;
      }
    }

    // UWB_D_frequency
    //
    if (n.name () == "UWB_D_frequency" && n.namespace_ ().empty ())
    {
      if (!UWB_D_frequency_.present ())
      {
        this->UWB_D_frequency_.set (UWB_D_frequency_traits::create (i, f, this));
        continue;
      }
    }

    // UWB_signal_length
    //
    if (n.name () == "UWB_signal_length" && n.namespace_ ().empty ())
    {
      if (!UWB_signal_length_.present ())
      {
        this->UWB_signal_length_.set (UWB_signal_length_traits::create (i, f, this));
        continue;
      }
    }

    // max_UWB_range
    //
    if (n.name () == "max_UWB_range" && n.namespace_ ().empty ())
    {
      if (!max_UWB_range_.present ())
      {
        this->max_UWB_range_.set (max_UWB_range_traits::create (i, f, this));
        continue;
      }
    }

    // s_tdoa
    //
    if (n.name () == "s_tdoa" && n.namespace_ ().empty ())
    {
      if (!s_tdoa_.present ())
      {
        this->s_tdoa_.set (s_tdoa_traits::create (i, f, this));
        continue;
      }
    }

    // s_twr
    //
    if (n.name () == "s_twr" && n.namespace_ ().empty ())
    {
      if (!s_twr_.present ())
      {
        this->s_twr_.set (s_twr_traits::create (i, f, this));
        continue;
      }
    }

    // Q
    //
    if (n.name () == "Q" && n.namespace_ ().empty ())
    {
      if (!Q_.present ())
      {
        this->Q_.set (Q_traits::create (i, f, this));
        continue;
      }
    }

    // kR
    //
    if (n.name () == "kR" && n.namespace_ ().empty ())
    {
      if (!kR_.present ())
      {
        this->kR_.set (kR_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_1_en
    //
    if (n.name () == "beacon_1_en" && n.namespace_ ().empty ())
    {
      if (!beacon_1_en_.present ())
      {
        this->beacon_1_en_.set (beacon_1_en_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_2_en
    //
    if (n.name () == "beacon_2_en" && n.namespace_ ().empty ())
    {
      if (!beacon_2_en_.present ())
      {
        this->beacon_2_en_.set (beacon_2_en_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_3_en
    //
    if (n.name () == "beacon_3_en" && n.namespace_ ().empty ())
    {
      if (!beacon_3_en_.present ())
      {
        this->beacon_3_en_.set (beacon_3_en_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_4_en
    //
    if (n.name () == "beacon_4_en" && n.namespace_ ().empty ())
    {
      if (!beacon_4_en_.present ())
      {
        this->beacon_4_en_.set (beacon_4_en_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_5_en
    //
    if (n.name () == "beacon_5_en" && n.namespace_ ().empty ())
    {
      if (!beacon_5_en_.present ())
      {
        this->beacon_5_en_.set (beacon_5_en_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_6_en
    //
    if (n.name () == "beacon_6_en" && n.namespace_ ().empty ())
    {
      if (!beacon_6_en_.present ())
      {
        this->beacon_6_en_.set (beacon_6_en_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_7_en
    //
    if (n.name () == "beacon_7_en" && n.namespace_ ().empty ())
    {
      if (!beacon_7_en_.present ())
      {
        this->beacon_7_en_.set (beacon_7_en_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_8_en
    //
    if (n.name () == "beacon_8_en" && n.namespace_ ().empty ())
    {
      if (!beacon_8_en_.present ())
      {
        this->beacon_8_en_.set (beacon_8_en_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_1_freq
    //
    if (n.name () == "beacon_1_freq" && n.namespace_ ().empty ())
    {
      if (!beacon_1_freq_.present ())
      {
        this->beacon_1_freq_.set (beacon_1_freq_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_2_freq
    //
    if (n.name () == "beacon_2_freq" && n.namespace_ ().empty ())
    {
      if (!beacon_2_freq_.present ())
      {
        this->beacon_2_freq_.set (beacon_2_freq_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_3_freq
    //
    if (n.name () == "beacon_3_freq" && n.namespace_ ().empty ())
    {
      if (!beacon_3_freq_.present ())
      {
        this->beacon_3_freq_.set (beacon_3_freq_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_4_freq
    //
    if (n.name () == "beacon_4_freq" && n.namespace_ ().empty ())
    {
      if (!beacon_4_freq_.present ())
      {
        this->beacon_4_freq_.set (beacon_4_freq_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_5_freq
    //
    if (n.name () == "beacon_5_freq" && n.namespace_ ().empty ())
    {
      if (!beacon_5_freq_.present ())
      {
        this->beacon_5_freq_.set (beacon_5_freq_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_6_freq
    //
    if (n.name () == "beacon_6_freq" && n.namespace_ ().empty ())
    {
      if (!beacon_6_freq_.present ())
      {
        this->beacon_6_freq_.set (beacon_6_freq_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_7_freq
    //
    if (n.name () == "beacon_7_freq" && n.namespace_ ().empty ())
    {
      if (!beacon_7_freq_.present ())
      {
        this->beacon_7_freq_.set (beacon_7_freq_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_8_freq
    //
    if (n.name () == "beacon_8_freq" && n.namespace_ ().empty ())
    {
      if (!beacon_8_freq_.present ())
      {
        this->beacon_8_freq_.set (beacon_8_freq_traits::create (i, f, this));
        continue;
      }
    }

    // beacon_dynamic_freq
    //
    if (n.name () == "beacon_dynamic_freq" && n.namespace_ ().empty ())
    {
      if (!beacon_dynamic_freq_.present ())
      {
        this->beacon_dynamic_freq_.set (beacon_dynamic_freq_traits::create (i, f, this));
        continue;
      }
    }

    // dynamic_cov_approach
    //
    if (n.name () == "dynamic_cov_approach" && n.namespace_ ().empty ())
    {
      if (!dynamic_cov_approach_.present ())
      {
        this->dynamic_cov_approach_.set (dynamic_cov_approach_traits::create (i, f, this));
        continue;
      }
    }

    // beaconvelocity
    //
    if (n.name () == "beaconvelocity" && n.namespace_ ().empty ())
    {
      if (!beaconvelocity_.present ())
      {
        this->beaconvelocity_.set (beaconvelocity_traits::create (i, f, this));
        continue;
      }
    }

    // x_beacon_1
    //
    if (n.name () == "x_beacon_1" && n.namespace_ ().empty ())
    {
      if (!x_beacon_1_.present ())
      {
        this->x_beacon_1_.set (x_beacon_1_traits::create (i, f, this));
        continue;
      }
    }

    // y_beacon_1
    //
    if (n.name () == "y_beacon_1" && n.namespace_ ().empty ())
    {
      if (!y_beacon_1_.present ())
      {
        this->y_beacon_1_.set (y_beacon_1_traits::create (i, f, this));
        continue;
      }
    }

    // x_beacon_2
    //
    if (n.name () == "x_beacon_2" && n.namespace_ ().empty ())
    {
      if (!x_beacon_2_.present ())
      {
        this->x_beacon_2_.set (x_beacon_2_traits::create (i, f, this));
        continue;
      }
    }

    // y_beacon_2
    //
    if (n.name () == "y_beacon_2" && n.namespace_ ().empty ())
    {
      if (!y_beacon_2_.present ())
      {
        this->y_beacon_2_.set (y_beacon_2_traits::create (i, f, this));
        continue;
      }
    }

    // x_beacon_3
    //
    if (n.name () == "x_beacon_3" && n.namespace_ ().empty ())
    {
      if (!x_beacon_3_.present ())
      {
        this->x_beacon_3_.set (x_beacon_3_traits::create (i, f, this));
        continue;
      }
    }

    // y_beacon_3
    //
    if (n.name () == "y_beacon_3" && n.namespace_ ().empty ())
    {
      if (!y_beacon_3_.present ())
      {
        this->y_beacon_3_.set (y_beacon_3_traits::create (i, f, this));
        continue;
      }
    }

    // x_beacon_4
    //
    if (n.name () == "x_beacon_4" && n.namespace_ ().empty ())
    {
      if (!x_beacon_4_.present ())
      {
        this->x_beacon_4_.set (x_beacon_4_traits::create (i, f, this));
        continue;
      }
    }

    // y_beacon_4
    //
    if (n.name () == "y_beacon_4" && n.namespace_ ().empty ())
    {
      if (!y_beacon_4_.present ())
      {
        this->y_beacon_4_.set (y_beacon_4_traits::create (i, f, this));
        continue;
      }
    }

    // x_beacon_5
    //
    if (n.name () == "x_beacon_5" && n.namespace_ ().empty ())
    {
      if (!x_beacon_5_.present ())
      {
        this->x_beacon_5_.set (x_beacon_5_traits::create (i, f, this));
        continue;
      }
    }

    // y_beacon_5
    //
    if (n.name () == "y_beacon_5" && n.namespace_ ().empty ())
    {
      if (!y_beacon_5_.present ())
      {
        this->y_beacon_5_.set (y_beacon_5_traits::create (i, f, this));
        continue;
      }
    }

    // x_beacon_6
    //
    if (n.name () == "x_beacon_6" && n.namespace_ ().empty ())
    {
      if (!x_beacon_6_.present ())
      {
        this->x_beacon_6_.set (x_beacon_6_traits::create (i, f, this));
        continue;
      }
    }

    // y_beacon_6
    //
    if (n.name () == "y_beacon_6" && n.namespace_ ().empty ())
    {
      if (!y_beacon_6_.present ())
      {
        this->y_beacon_6_.set (y_beacon_6_traits::create (i, f, this));
        continue;
      }
    }

    // x_beacon_7
    //
    if (n.name () == "x_beacon_7" && n.namespace_ ().empty ())
    {
      if (!x_beacon_7_.present ())
      {
        this->x_beacon_7_.set (x_beacon_7_traits::create (i, f, this));
        continue;
      }
    }

    // y_beacon_7
    //
    if (n.name () == "y_beacon_7" && n.namespace_ ().empty ())
    {
      if (!y_beacon_7_.present ())
      {
        this->y_beacon_7_.set (y_beacon_7_traits::create (i, f, this));
        continue;
      }
    }

    // x_beacon_8
    //
    if (n.name () == "x_beacon_8" && n.namespace_ ().empty ())
    {
      if (!x_beacon_8_.present ())
      {
        this->x_beacon_8_.set (x_beacon_8_traits::create (i, f, this));
        continue;
      }
    }

    // y_beacon_8
    //
    if (n.name () == "y_beacon_8" && n.namespace_ ().empty ())
    {
      if (!y_beacon_8_.present ())
      {
        this->y_beacon_8_.set (y_beacon_8_traits::create (i, f, this));
        continue;
      }
    }

    // acc_noise_sigma
    //
    if (n.name () == "acc_noise_sigma" && n.namespace_ ().empty ())
    {
      if (!acc_noise_sigma_.present ())
      {
        this->acc_noise_sigma_.set (acc_noise_sigma_traits::create (i, f, this));
        continue;
      }
    }

    // noise_motor_sigma
    //
    if (n.name () == "noise_motor_sigma" && n.namespace_ ().empty ())
    {
      if (!noise_motor_sigma_.present ())
      {
        this->noise_motor_sigma_.set (noise_motor_sigma_traits::create (i, f, this));
        continue;
      }
    }

    // noise_type
    //
    if (n.name () == "noise_type" && n.namespace_ ().empty ())
    {
      if (!noise_type_.present ())
      {
        this->noise_type_.set (noise_type_traits::create (i, f, this));
        continue;
      }
    }

    // gauss_sigma
    //
    if (n.name () == "gauss_sigma" && n.namespace_ ().empty ())
    {
      if (!gauss_sigma_.present ())
      {
        this->gauss_sigma_.set (gauss_sigma_traits::create (i, f, this));
        continue;
      }
    }

    // gauss_sigma_twr
    //
    if (n.name () == "gauss_sigma_twr" && n.namespace_ ().empty ())
    {
      if (!gauss_sigma_twr_.present ())
      {
        this->gauss_sigma_twr_.set (gauss_sigma_twr_traits::create (i, f, this));
        continue;
      }
    }

    // gauss_sigma_tdoa
    //
    if (n.name () == "gauss_sigma_tdoa" && n.namespace_ ().empty ())
    {
      if (!gauss_sigma_tdoa_.present ())
      {
        this->gauss_sigma_tdoa_.set (gauss_sigma_tdoa_traits::create (i, f, this));
        continue;
      }
    }

    // htc_gamma
    //
    if (n.name () == "htc_gamma" && n.namespace_ ().empty ())
    {
      if (!htc_gamma_.present ())
      {
        this->htc_gamma_.set (htc_gamma_traits::create (i, f, this));
        continue;
      }
    }

    // htc_ratio
    //
    if (n.name () == "htc_ratio" && n.namespace_ ().empty ())
    {
      if (!htc_ratio_.present ())
      {
        this->htc_ratio_.set (htc_ratio_traits::create (i, f, this));
        continue;
      }
    }

    // htg_mu
    //
    if (n.name () == "htg_mu" && n.namespace_ ().empty ())
    {
      if (!htg_mu_.present ())
      {
        this->htg_mu_.set (htg_mu_traits::create (i, f, this));
        continue;
      }
    }

    // htg_k
    //
    if (n.name () == "htg_k" && n.namespace_ ().empty ())
    {
      if (!htg_k_.present ())
      {
        this->htg_k_.set (htg_k_traits::create (i, f, this));
        continue;
      }
    }

    // htg_lambda
    //
    if (n.name () == "htg_lambda" && n.namespace_ ().empty ())
    {
      if (!htg_lambda_.present ())
      {
        this->htg_lambda_.set (htg_lambda_traits::create (i, f, this));
        continue;
      }
    }

    // htg_scale
    //
    if (n.name () == "htg_scale" && n.namespace_ ().empty ())
    {
      if (!htg_scale_.present ())
      {
        this->htg_scale_.set (htg_scale_traits::create (i, f, this));
        continue;
      }
    }

    // terminaloutput
    //
    if (n.name () == "terminaloutput" && n.namespace_ ().empty ())
    {
      if (!terminaloutput_.present ())
      {
        this->terminaloutput_.set (terminaloutput_traits::create (i, f, this));
        continue;
      }
    }

    // simulation_updatefreq
    //
    if (n.name () == "simulation_updatefreq" && n.namespace_ ().empty ())
    {
      if (!simulation_updatefreq_.present ())
      {
        this->simulation_updatefreq_.set (simulation_updatefreq_traits::create (i, f, this));
        continue;
      }
    }

    // simulation_realtimefactor
    //
    if (n.name () == "simulation_realtimefactor" && n.namespace_ ().empty ())
    {
      if (!simulation_realtimefactor_.present ())
      {
        this->simulation_realtimefactor_.set (simulation_realtimefactor_traits::create (i, f, this));
        continue;
      }
    }

    // time_limit
    //
    if (n.name () == "time_limit" && n.namespace_ ().empty ())
    {
      if (!time_limit_.present ())
      {
        this->time_limit_.set (time_limit_traits::create (i, f, this));
        continue;
      }
    }

    // environment
    //
    if (n.name () == "environment" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< environment_type > r (
        environment_traits::create (i, f, this));

      if (!environment_.present ())
      {
        this->environment_.set (r);
        continue;
      }
    }

    // window_width
    //
    if (n.name () == "window_width" && n.namespace_ ().empty ())
    {
      if (!window_width_.present ())
      {
        this->window_width_.set (window_width_traits::create (i, f, this));
        continue;
      }
    }

    // window_height
    //
    if (n.name () == "window_height" && n.namespace_ ().empty ())
    {
      if (!window_height_.present ())
      {
        this->window_height_.set (window_height_traits::create (i, f, this));
        continue;
      }
    }

    // scale
    //
    if (n.name () == "scale" && n.namespace_ ().empty ())
    {
      if (!scale_.present ())
      {
        this->scale_.set (scale_traits::create (i, f, this));
        continue;
      }
    }

    // mouse_drag_speed
    //
    if (n.name () == "mouse_drag_speed" && n.namespace_ ().empty ())
    {
      if (!mouse_drag_speed_.present ())
      {
        this->mouse_drag_speed_.set (mouse_drag_speed_traits::create (i, f, this));
        continue;
      }
    }

    // mouse_zoom_speed
    //
    if (n.name () == "mouse_zoom_speed" && n.namespace_ ().empty ())
    {
      if (!mouse_zoom_speed_.present ())
      {
        this->mouse_zoom_speed_.set (mouse_zoom_speed_traits::create (i, f, this));
        continue;
      }
    }

    // zoom
    //
    if (n.name () == "zoom" && n.namespace_ ().empty ())
    {
      if (!zoom_.present ())
      {
        this->zoom_.set (zoom_traits::create (i, f, this));
        continue;
      }
    }

    // animation_updatefreq
    //
    if (n.name () == "animation_updatefreq" && n.namespace_ ().empty ())
    {
      if (!animation_updatefreq_.present ())
      {
        this->animation_updatefreq_.set (animation_updatefreq_traits::create (i, f, this));
        continue;
      }
    }

    // logger_updatefreq
    //
    if (n.name () == "logger_updatefreq" && n.namespace_ ().empty ())
    {
      if (!logger_updatefreq_.present ())
      {
        this->logger_updatefreq_.set (logger_updatefreq_traits::create (i, f, this));
        continue;
      }
    }

    // policy
    //
    if (n.name () == "policy" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< policy_type > r (
        policy_traits::create (i, f, this));

      if (!policy_.present ())
      {
        this->policy_.set (r);
        continue;
      }
    }

    // fitness
    //
    if (n.name () == "fitness" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< fitness_type > r (
        fitness_traits::create (i, f, this));

      if (!fitness_.present ())
      {
        this->fitness_.set (r);
        continue;
      }
    }

    break;
  }

  if (!Kpphi_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Kpphi",
      "");
  }

  if (!Kiphi_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Kiphi",
      "");
  }

  if (!Kdphi_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Kdphi",
      "");
  }

  if (!Kptheta_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Kptheta",
      "");
  }

  if (!Kitheta_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Kitheta",
      "");
  }

  if (!Kdtheta_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Kdtheta",
      "");
  }

  if (!Kpx_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Kpx",
      "");
  }

  if (!Kix_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Kix",
      "");
  }

  if (!Kdx_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Kdx",
      "");
  }

  if (!Kpy_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Kpy",
      "");
  }

  if (!Kiy_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Kiy",
      "");
  }

  if (!Kdy_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Kdy",
      "");
  }

  if (!Kpz_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Kpz",
      "");
  }

  if (!Kiz_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Kiz",
      "");
  }

  if (!Kdz_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Kdz",
      "");
  }

  if (!enable_UWB_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "enable_UWB",
      "");
  }

  if (!dynamic_beacons_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dynamic_beacons",
      "");
  }

  if (!EKF_timestep_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "EKF_timestep",
      "");
  }

  if (!IMU_timestep_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "IMU_timestep",
      "");
  }

  if (!trajectory_frequency_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "trajectory_frequency",
      "");
  }

  if (!UWB_frequency_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "UWB_frequency",
      "");
  }

  if (!UWB_D_frequency_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "UWB_D_frequency",
      "");
  }

  if (!UWB_signal_length_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "UWB_signal_length",
      "");
  }

  if (!max_UWB_range_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "max_UWB_range",
      "");
  }

  if (!s_tdoa_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "s_tdoa",
      "");
  }

  if (!s_twr_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "s_twr",
      "");
  }

  if (!Q_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Q",
      "");
  }

  if (!kR_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "kR",
      "");
  }

  if (!beacon_1_en_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_1_en",
      "");
  }

  if (!beacon_2_en_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_2_en",
      "");
  }

  if (!beacon_3_en_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_3_en",
      "");
  }

  if (!beacon_4_en_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_4_en",
      "");
  }

  if (!beacon_5_en_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_5_en",
      "");
  }

  if (!beacon_6_en_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_6_en",
      "");
  }

  if (!beacon_7_en_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_7_en",
      "");
  }

  if (!beacon_8_en_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_8_en",
      "");
  }

  if (!beacon_1_freq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_1_freq",
      "");
  }

  if (!beacon_2_freq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_2_freq",
      "");
  }

  if (!beacon_3_freq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_3_freq",
      "");
  }

  if (!beacon_4_freq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_4_freq",
      "");
  }

  if (!beacon_5_freq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_5_freq",
      "");
  }

  if (!beacon_6_freq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_6_freq",
      "");
  }

  if (!beacon_7_freq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_7_freq",
      "");
  }

  if (!beacon_8_freq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_8_freq",
      "");
  }

  if (!beacon_dynamic_freq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beacon_dynamic_freq",
      "");
  }

  if (!dynamic_cov_approach_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dynamic_cov_approach",
      "");
  }

  if (!beaconvelocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beaconvelocity",
      "");
  }

  if (!x_beacon_1_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x_beacon_1",
      "");
  }

  if (!y_beacon_1_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y_beacon_1",
      "");
  }

  if (!x_beacon_2_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x_beacon_2",
      "");
  }

  if (!y_beacon_2_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y_beacon_2",
      "");
  }

  if (!x_beacon_3_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x_beacon_3",
      "");
  }

  if (!y_beacon_3_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y_beacon_3",
      "");
  }

  if (!x_beacon_4_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x_beacon_4",
      "");
  }

  if (!y_beacon_4_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y_beacon_4",
      "");
  }

  if (!x_beacon_5_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x_beacon_5",
      "");
  }

  if (!y_beacon_5_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y_beacon_5",
      "");
  }

  if (!x_beacon_6_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x_beacon_6",
      "");
  }

  if (!y_beacon_6_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y_beacon_6",
      "");
  }

  if (!x_beacon_7_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x_beacon_7",
      "");
  }

  if (!y_beacon_7_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y_beacon_7",
      "");
  }

  if (!x_beacon_8_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x_beacon_8",
      "");
  }

  if (!y_beacon_8_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y_beacon_8",
      "");
  }

  if (!acc_noise_sigma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "acc_noise_sigma",
      "");
  }

  if (!noise_motor_sigma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "noise_motor_sigma",
      "");
  }

  if (!noise_type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "noise_type",
      "");
  }

  if (!gauss_sigma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "gauss_sigma",
      "");
  }

  if (!gauss_sigma_twr_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "gauss_sigma_twr",
      "");
  }

  if (!gauss_sigma_tdoa_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "gauss_sigma_tdoa",
      "");
  }

  if (!htc_gamma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "htc_gamma",
      "");
  }

  if (!htc_ratio_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "htc_ratio",
      "");
  }

  if (!htg_mu_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "htg_mu",
      "");
  }

  if (!htg_k_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "htg_k",
      "");
  }

  if (!htg_lambda_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "htg_lambda",
      "");
  }

  if (!htg_scale_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "htg_scale",
      "");
  }

  if (!terminaloutput_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "terminaloutput",
      "");
  }

  if (!simulation_updatefreq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "simulation_updatefreq",
      "");
  }

  if (!simulation_realtimefactor_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "simulation_realtimefactor",
      "");
  }

  if (!time_limit_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "time_limit",
      "");
  }

  if (!environment_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "environment",
      "");
  }

  if (!window_width_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "window_width",
      "");
  }

  if (!window_height_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "window_height",
      "");
  }

  if (!scale_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "scale",
      "");
  }

  if (!mouse_drag_speed_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mouse_drag_speed",
      "");
  }

  if (!mouse_zoom_speed_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mouse_zoom_speed",
      "");
  }

  if (!zoom_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "zoom",
      "");
  }

  if (!animation_updatefreq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "animation_updatefreq",
      "");
  }

  if (!logger_updatefreq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "logger_updatefreq",
      "");
  }

  if (!policy_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "policy",
      "");
  }

  if (!fitness_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "fitness",
      "");
  }
}

parameters_t* parameters_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class parameters_t (*this, f, c);
}

parameters_t& parameters_t::
operator= (const parameters_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->Kpphi_ = x.Kpphi_;
    this->Kiphi_ = x.Kiphi_;
    this->Kdphi_ = x.Kdphi_;
    this->Kptheta_ = x.Kptheta_;
    this->Kitheta_ = x.Kitheta_;
    this->Kdtheta_ = x.Kdtheta_;
    this->Kpx_ = x.Kpx_;
    this->Kix_ = x.Kix_;
    this->Kdx_ = x.Kdx_;
    this->Kpy_ = x.Kpy_;
    this->Kiy_ = x.Kiy_;
    this->Kdy_ = x.Kdy_;
    this->Kpz_ = x.Kpz_;
    this->Kiz_ = x.Kiz_;
    this->Kdz_ = x.Kdz_;
    this->enable_UWB_ = x.enable_UWB_;
    this->dynamic_beacons_ = x.dynamic_beacons_;
    this->EKF_timestep_ = x.EKF_timestep_;
    this->IMU_timestep_ = x.IMU_timestep_;
    this->trajectory_frequency_ = x.trajectory_frequency_;
    this->UWB_frequency_ = x.UWB_frequency_;
    this->UWB_D_frequency_ = x.UWB_D_frequency_;
    this->UWB_signal_length_ = x.UWB_signal_length_;
    this->max_UWB_range_ = x.max_UWB_range_;
    this->s_tdoa_ = x.s_tdoa_;
    this->s_twr_ = x.s_twr_;
    this->Q_ = x.Q_;
    this->kR_ = x.kR_;
    this->beacon_1_en_ = x.beacon_1_en_;
    this->beacon_2_en_ = x.beacon_2_en_;
    this->beacon_3_en_ = x.beacon_3_en_;
    this->beacon_4_en_ = x.beacon_4_en_;
    this->beacon_5_en_ = x.beacon_5_en_;
    this->beacon_6_en_ = x.beacon_6_en_;
    this->beacon_7_en_ = x.beacon_7_en_;
    this->beacon_8_en_ = x.beacon_8_en_;
    this->beacon_1_freq_ = x.beacon_1_freq_;
    this->beacon_2_freq_ = x.beacon_2_freq_;
    this->beacon_3_freq_ = x.beacon_3_freq_;
    this->beacon_4_freq_ = x.beacon_4_freq_;
    this->beacon_5_freq_ = x.beacon_5_freq_;
    this->beacon_6_freq_ = x.beacon_6_freq_;
    this->beacon_7_freq_ = x.beacon_7_freq_;
    this->beacon_8_freq_ = x.beacon_8_freq_;
    this->beacon_dynamic_freq_ = x.beacon_dynamic_freq_;
    this->dynamic_cov_approach_ = x.dynamic_cov_approach_;
    this->beaconvelocity_ = x.beaconvelocity_;
    this->x_beacon_1_ = x.x_beacon_1_;
    this->y_beacon_1_ = x.y_beacon_1_;
    this->x_beacon_2_ = x.x_beacon_2_;
    this->y_beacon_2_ = x.y_beacon_2_;
    this->x_beacon_3_ = x.x_beacon_3_;
    this->y_beacon_3_ = x.y_beacon_3_;
    this->x_beacon_4_ = x.x_beacon_4_;
    this->y_beacon_4_ = x.y_beacon_4_;
    this->x_beacon_5_ = x.x_beacon_5_;
    this->y_beacon_5_ = x.y_beacon_5_;
    this->x_beacon_6_ = x.x_beacon_6_;
    this->y_beacon_6_ = x.y_beacon_6_;
    this->x_beacon_7_ = x.x_beacon_7_;
    this->y_beacon_7_ = x.y_beacon_7_;
    this->x_beacon_8_ = x.x_beacon_8_;
    this->y_beacon_8_ = x.y_beacon_8_;
    this->acc_noise_sigma_ = x.acc_noise_sigma_;
    this->noise_motor_sigma_ = x.noise_motor_sigma_;
    this->noise_type_ = x.noise_type_;
    this->gauss_sigma_ = x.gauss_sigma_;
    this->gauss_sigma_twr_ = x.gauss_sigma_twr_;
    this->gauss_sigma_tdoa_ = x.gauss_sigma_tdoa_;
    this->htc_gamma_ = x.htc_gamma_;
    this->htc_ratio_ = x.htc_ratio_;
    this->htg_mu_ = x.htg_mu_;
    this->htg_k_ = x.htg_k_;
    this->htg_lambda_ = x.htg_lambda_;
    this->htg_scale_ = x.htg_scale_;
    this->terminaloutput_ = x.terminaloutput_;
    this->simulation_updatefreq_ = x.simulation_updatefreq_;
    this->simulation_realtimefactor_ = x.simulation_realtimefactor_;
    this->time_limit_ = x.time_limit_;
    this->environment_ = x.environment_;
    this->window_width_ = x.window_width_;
    this->window_height_ = x.window_height_;
    this->scale_ = x.scale_;
    this->mouse_drag_speed_ = x.mouse_drag_speed_;
    this->mouse_zoom_speed_ = x.mouse_zoom_speed_;
    this->zoom_ = x.zoom_;
    this->animation_updatefreq_ = x.animation_updatefreq_;
    this->logger_updatefreq_ = x.logger_updatefreq_;
    this->policy_ = x.policy_;
    this->fitness_ = x.fitness_;
  }

  return *this;
}

parameters_t::
~parameters_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::parameters_t >
parameters (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::parameters_t > (
    ::parameters (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::parameters_t >
parameters (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::parameters_t > (
    ::parameters (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::parameters_t >
parameters (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::parameters_t > (
    ::parameters (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::parameters (isrc, f, p);
}

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::parameters (isrc, h, f, p);
}

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::parameters (isrc, h, f, p);
}

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::parameters (isrc, f, p);
}

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::parameters (isrc, h, f, p);
}

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::parameters (isrc, h, f, p);
}

::std::auto_ptr< ::parameters_t >
parameters (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::parameters_t > (
    ::parameters (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::parameters_t >
parameters (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::parameters_t > (
    ::parameters (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::parameters_t >
parameters (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::parameters_t > (
    ::parameters (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::parameters_t >
parameters (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::parameters_t > (
      ::parameters (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "parameters" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::parameters_t > r (
      ::xsd::cxx::tree::traits< ::parameters_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "parameters",
    "");
}

::std::auto_ptr< ::parameters_t >
parameters (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "parameters" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::parameters_t > r (
      ::xsd::cxx::tree::traits< ::parameters_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "parameters",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

